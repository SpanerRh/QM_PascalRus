<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.4">
<meta name="author" content="Michalis Kamburelis">
<title>Quick Modern Object Pascal for Programmers</title>
<link rel="stylesheet" href="Quick%20Modern%20Object%20Pascal%20for%20Programmers_files/css.css">
<style>
/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */
/* Remove comment around @import statement below when using as a custom stylesheet */
/*@import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700";*/
article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}
audio,canvas,video{display:inline-block}
audio:not([controls]){display:none;height:0}
[hidden],template{display:none}
script{display:none!important}
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
body{margin:0}
a{background:transparent}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
abbr[title]{border-bottom:1px dotted}
b,strong{font-weight:bold}
dfn{font-style:italic}
hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}
input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
body{-webkit-font-smoothing:antialiased}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.center{margin-left:auto;margin-right:auto}
.spread{width:100%}
p.lead,.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:none}
p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}
ul.square{list-style-type:square}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.no-bullet{list-style:none}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}
abbr{text-transform:none}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}
blockquote cite:before{content:"\2014 \0020"}
blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}
table thead,table tfoot{background:#f7f8f7;font-weight:bold}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}
body{tab-size:4}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:" ";display:table}
.clearfix:after,.float-group:after{clear:both}
*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;text-rendering:optimizeSpeed}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menu{color:rgba(0,0,0,.8)}
b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}
b.button:before{content:"[";padding:0 3px 0 2px}
b.button:after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:" ";display:table}
#header:after,#content:after,#footnotes:after,#footer:after{clear:both}
#content{margin-top:1.25em}
#content:before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}
#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span:before{content:"\00a0\2013\00a0"}
#header .details br+span.author:before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark:before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber:after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media only screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}
@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:rgba(255,255,255,.8);line-height:1.44}
.sect1{padding-bottom:.625em}
@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}
.sect1+.sect1{border-top:1px solid #efefed}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor:before,h2>a.anchor:before,h3>a.anchor:before,#toctitle>a.anchor:before,.sidebarblock>.content>.title>a.anchor:before,h4>a.anchor:before,h5>a.anchor:before,h6>a.anchor:before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock>caption.title{white-space:nowrap;overflow:visible;max-width:0}
.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{color:rgba(0,0,0,.85)}
table.tableblock #preamble>.sectionbody>.paragraph:first-of-type p{font-size:inherit}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}
.exampleblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child{margin-bottom:0}
.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
.sidebarblock>:first-child{margin-top:0}
.sidebarblock>:last-child{margin-bottom:0}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class="highlight"],.listingblock pre[class^="highlight "],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}
.sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class="highlight"],.sidebarblock .listingblock pre[class^="highlight "],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}
.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}
.literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}
@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}
@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}
.literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.listingblock>.content{position:relative}
.listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}
.listingblock:hover code[data-lang]:before{display:block}
.listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}
.listingblock.terminal pre .command:not([data-prompt]):before{content:"$"}
table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}
table.pyhltable td.code{padding-left:.75em;padding-right:0}
pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}
pre.pygments .lineno{display:inline-block;margin-right:.25em}
table.pyhltable .linenodiv{background:none!important;padding-right:0!important}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote:before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}
.quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}
.quoteblock .quoteblock blockquote{padding:0 0 0 .75em}
.quoteblock .quoteblock blockquote:before{display:none}
.verseblock{margin:0 1em 1.25em 1em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract{margin:0 0 1.25em 0;display:block}
.quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}
.quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}
table.tableblock{max-width:100%;border-collapse:separate}
table.tableblock td>.paragraph:last-child p>p:last-child,table.tableblock th>p:last-child,table.tableblock td>p:last-child{margin-bottom:0}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}
table.grid-all tfoot>tr>th.tableblock,table.grid-all tfoot>tr>td.tableblock{border-width:1px 1px 0 0}
table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}
table.grid-all *>tr>.tableblock:last-child,table.grid-cols *>tr>.tableblock:last-child{border-right-width:0}
table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}
table.grid-all tbody>tr:last-child>th.tableblock,table.grid-all tbody>tr:last-child>td.tableblock,table.grid-all thead:last-child>tr>th.tableblock,table.grid-rows tbody>tr:last-child>th.tableblock,table.grid-rows tbody>tr:last-child>td.tableblock,table.grid-rows thead:last-child>tr>th.tableblock{border-bottom-width:0}
table.grid-rows tfoot>tr>th.tableblock,table.grid-rows tfoot>tr>td.tableblock{border-width:1px 0 0 0}
table.frame-all{border-width:1px}
table.frame-sides{border-width:0 1px}
table.frame-topbot{border-width:1px 0}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
td>div.verse{white-space:pre}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}
ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}
ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1em;font-size:.85em}
ul.checklist li>p:first-child>input[type="checkbox"]:first-child{width:1em;position:relative;top:1px}
ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}
ul.inline>li{list-style:none;float:left;margin-left:1.375em;display:block}
ul.inline>li>*{display:block}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist>table tr>td:first-of-type{padding:0 .75em;line-height:1}
.colist>table tr>td:last-of-type{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}
.imageblock.left,.imageblock[style*="float: left"]{margin:.25em .625em 1.25em 0}
.imageblock.right,.imageblock[style*="float: right"]{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}
.gist .file-data>table td.line-data{width:99%}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background-color:#00fafa}
.black{color:#000}
.black-background{background-color:#000}
.blue{color:#0000bf}
.blue-background{background-color:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background-color:#fa00fa}
.gray{color:#606060}
.gray-background{background-color:#7d7d7d}
.green{color:#006000}
.green-background{background-color:#007d00}
.lime{color:#00bf00}
.lime-background{background-color:#00fa00}
.maroon{color:#600000}
.maroon-background{background-color:#7d0000}
.navy{color:#000060}
.navy-background{background-color:#00007d}
.olive{color:#606000}
.olive-background{background-color:#7d7d00}
.purple{color:#600060}
.purple-background{background-color:#7d007d}
.red{color:#bf0000}
.red-background{background-color:#fa0000}
.silver{color:#909090}
.silver-background{background-color:#bcbcbc}
.teal{color:#006060}
.teal-background{background-color:#007d7d}
.white{color:#bfbfbf}
.white-background{background-color:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background-color:#fafa00}
span.icon>.fa{cursor:default}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note:before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip:before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning:before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution:before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important:before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]:after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@media print{@page{margin:1.25cm .75cm}
*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare):after,a[href^="https:"]:not(.bare):after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]:after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}
.sect1{padding-bottom:0!important}
.sect1+.sect1{border:0!important}
#header>h1:first-child{margin-top:1.25rem}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em 0}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span:before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]:before{display:block}
#footer{background:none!important;padding:0 .9375em}
#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
</style>
<style>
/* Stylesheet for CodeRay to match GitHub theme | MIT License | http://foundation.zurb.com */
/*pre.CodeRay {background-color:#f7f7f8;}*/
.CodeRay .line-numbers{border-right:1px solid #d8d8d8;padding:0 0.5em 0 .25em}
.CodeRay span.line-numbers{display:inline-block;margin-right:.5em;color:rgba(0,0,0,.3)}
.CodeRay .line-numbers strong{color:rgba(0,0,0,.4)}
table.CodeRay{border-collapse:separate;border-spacing:0;margin-bottom:0;border:0;background:none}
table.CodeRay td{vertical-align: top;line-height:1.45}
table.CodeRay td.line-numbers{text-align:right}
table.CodeRay td.line-numbers>pre{padding:0;color:rgba(0,0,0,.3)}
table.CodeRay td.code{padding:0 0 0 .5em}
table.CodeRay td.code>pre{padding:0}
.CodeRay .debug{color:#fff !important;background:#000080 !important}
.CodeRay .annotation{color:#007}
.CodeRay .attribute-name{color:#000080}
.CodeRay .attribute-value{color:#700}
.CodeRay .binary{color:#509}
.CodeRay .comment{color:#998;font-style:italic}
.CodeRay .char{color:#04d}
.CodeRay .char .content{color:#04d}
.CodeRay .char .delimiter{color:#039}
.CodeRay .class{color:#458;font-weight:bold}
.CodeRay .complex{color:#a08}
.CodeRay .constant,.CodeRay .predefined-constant{color:#008080}
.CodeRay .color{color:#099}
.CodeRay .class-variable{color:#369}
.CodeRay .decorator{color:#b0b}
.CodeRay .definition{color:#099}
.CodeRay .delimiter{color:#000}
.CodeRay .doc{color:#970}
.CodeRay .doctype{color:#34b}
.CodeRay .doc-string{color:#d42}
.CodeRay .escape{color:#666}
.CodeRay .entity{color:#800}
.CodeRay .error{color:#808}
.CodeRay .exception{color:inherit}
.CodeRay .filename{color:#099}
.CodeRay .function{color:#900;font-weight:bold}
.CodeRay .global-variable{color:#008080}
.CodeRay .hex{color:#058}
.CodeRay .integer,.CodeRay .float{color:#099}
.CodeRay .include{color:#555}
.CodeRay .inline{color:#000}
.CodeRay .inline .inline{background:#ccc}
.CodeRay .inline .inline .inline{background:#bbb}
.CodeRay .inline .inline-delimiter{color:#d14}
.CodeRay .inline-delimiter{color:#d14}
.CodeRay .important{color:#555;font-weight:bold}
.CodeRay .interpreted{color:#b2b}
.CodeRay .instance-variable{color:#008080}
.CodeRay .label{color:#970}
.CodeRay .local-variable{color:#963}
.CodeRay .octal{color:#40e}
.CodeRay .predefined{color:#369}
.CodeRay .preprocessor{color:#579}
.CodeRay .pseudo-class{color:#555}
.CodeRay .directive{font-weight:bold}
.CodeRay .type{font-weight:bold}
.CodeRay .predefined-type{color:inherit}
.CodeRay .reserved,.CodeRay .keyword {color:#000;font-weight:bold}
.CodeRay .key{color:#808}
.CodeRay .key .delimiter{color:#606}
.CodeRay .key .char{color:#80f}
.CodeRay .value{color:#088}
.CodeRay .regexp .delimiter{color:#808}
.CodeRay .regexp .content{color:#808}
.CodeRay .regexp .modifier{color:#808}
.CodeRay .regexp .char{color:#d14}
.CodeRay .regexp .function{color:#404;font-weight:bold}
.CodeRay .string{color:#d20}
.CodeRay .string .string .string{background:#ffd0d0}
.CodeRay .string .content{color:#d14}
.CodeRay .string .char{color:#d14}
.CodeRay .string .delimiter{color:#d14}
.CodeRay .shell{color:#d14}
.CodeRay .shell .delimiter{color:#d14}
.CodeRay .symbol{color:#990073}
.CodeRay .symbol .content{color:#a60}
.CodeRay .symbol .delimiter{color:#630}
.CodeRay .tag{color:#008080}
.CodeRay .tag-special{color:#d70}
.CodeRay .variable{color:#036}
.CodeRay .insert{background:#afa}
.CodeRay .delete{background:#faa}
.CodeRay .change{color:#aaf;background:#007}
.CodeRay .head{color:#f8f;background:#505}
.CodeRay .insert .insert{color:#080}
.CodeRay .delete .delete{color:#800}
.CodeRay .change .change{color:#66f}
.CodeRay .head .head{color:#f4f}
</style>
</head>
<body class="article toc2 toc-left">
<div style="" id="header">
<h1 style="">Быстрый Современный Object Pascal для программистов</h1>
<div style="" class="details">
<span id="author" class="author">Michalis Kamburelis</span><br>
</div>
<div id="toc" class="toc2">
<div id="toctitle">Содержание</div>
<ul style="" class="sectlevel1">
<li><a href="#_why">1. Зачем</a></li>
<li style=""><a href="#_basics">2. Основы</a>
<ul style="" class="sectlevel2">
<li><a href="#__hello_world_program">2.1. "Программа Hello world"</a></li>
<li style=""><a style="" href="#_functions_procedures_primitive_types">2.2. Функции, процедуры, простейшие типы</a></li>
<li><a href="#_testing_if">2.3. Проверка (if)</a></li>
<li style=""><a style="" href="#_logical_relational_and_bit_wise_operators">2.4. Логические операторы, операторы отношений and битовые операторы</a></li>
<li><a href="#_testing_single_expression_for_multiple_values_case">2.5. Проверка выражения на множественные значения (case)</a></li>
<li><a href="#_enumerated_and_ordinal_types_and_sets_and_constant_length_arrays">2.6. Перечисляемый и порядковый типы, наборы и массивы постоянной длины</a></li>
<li><a href="#_loops_for_while_repeat_for_in">2.7. Циклы (for, while, repeat, for .. in)</a></li>
<li><a href="#_output_logging">2.8. Вывод, логирование(ведение журнала)</a></li>
</ul>
</li>
<li style=""><a href="#_units">3. Юниты(Units)</a>
<ul style="" class="sectlevel2">
<li><a href="#_units_using_each_other">3.1. Юниты, использующие друг друга</a></li>
<li style=""><a style="" href="#_qualifying_identifiers_with_unit_name">3.2. Определенипе идентификаторов с именем юнита</a></li>
<li><a href="#_exposing_one_unit_identifiers_from_another">3.3. Испоьзование идентификаторов одного юнита в другом</a></li>
</ul>
</li>
<li><a href="#_classes">4. Классы</a>
<ul class="sectlevel2">
<li><a href="#_basics_2">4.1. Основы</a></li>
<li><a href="#_inheritance_is_as">4.2. Наследование</a></li>
<li><a href="#_properties">4.3. Свойства</a></li>
<li><a href="#_exceptions">4.4. Исключения</a></li>
<li><a href="#_visibility_specifiers">4.5. Видимость спецификаторов</a></li>
<li><a href="#_default_ancestor">4.6. Стандартные предки</a></li>
</ul>
</li>
<li><a href="#_freeing_classes">5. Освобождение классов</a>
<ul class="sectlevel2">
<li><a href="#_remember_to_free_the_class_instances">5.1. Помни освободить экзэмпляры класса</a></li>
<li><a href="#_how_to_free">5.2. Как освободить</a></li>
<li><a href="#_manual_and_automatic_freeing">5.3. Ручное и автоматическое освобождение</a></li>
<li><a href="#_free_notification">5.4. <b>Освободи ссылающиеся типы</b></a></li>
</ul>
</li>
<li><a href="#_run_time_library">6. Библиотека Run-time</a>
<ul class="sectlevel2">
<li><a href="#_input_output_using_streams">6.1. Использование потоков ввода/вывода </a></li>
<li><a href="#_lists">6.2. Списки</a></li>
<li><a href="#_cloning_tpersistent_assign">6.3. Клонирование: TPersistent.Assign</a></li>
</ul>
</li>
<li style=""><a href="#_various_language_features">7. Различные языковые особенности</a>
<ul style="" class="sectlevel2">
<li style=""><a style="" href="#_local_nested_routines">7.1. Локальные(вложенные) подпрограммы</a></li>
<li><a href="#Callbacks">7.2. Возвращение (события, иказатели на функции, процедурные переменные)</a></li>
<li><a href="#_generics">7.3. Обобщенное программирование(Дженерики)</a></li>
<li><a href="#_overloading">7.4. Перегрузка</a></li>
<li><a href="#_preprocessor">7.5. Пропроцессор</a></li>
<li><a href="#_records">7.6. Записи</a></li>
<li><a href="#_old_style_objects">7.7. Объекты старого типа</a></li>
<li><a href="#_pointers">7.8. Указатели</a></li>
<li><a href="#_operator_overloading">7.9. Операторы перегрузки</a></li>
</ul>
</li>
<li style=""><a href="#_advanced_classes_features">8. Продвинутые особенности классов</a>
<ul style="" class="sectlevel2">
<li><a href="#_private_and_strict_private">8.1. приватные и строго приватные</a></li>
<li style=""><a href="#_class_methods">8.2. Методы классов</a></li>
<li><a href="#_more_stuff_inside_classes_and_nested_classes">8.3. Больше вещей внутри классов и внутренних классов</a></li>
<li style=""><a href="#_class_references">8.4. Ссылки классов</a></li>
<li><a href="#_class_helpers">8.5. Помощники классов</a></li>
<li><a href="#_virtual_constructors_destructors">8.6. Виртуальные конструкторы и деструкторы</a></li>
<li><a href="#_an_exception_in_constructor">8.7. Исключение в конструкторе</a></li>
</ul>
</li>
<li style=""><a href="#_interfaces">9. Интерфейсы</a>
<ul style="" class="sectlevel2">
<li><a href="#_good_corba_interfaces">9.1. Качественные (CORBA) интерфейсы</a></li>
<li style=""><a href="#_ugly_com_interfaces">9.2. Уродские/некачественные (COM) интерфейсы</a></li>
<li><a href="#_typecasting_interfaces_without_as_operator">9.3. Приведение типов без оператора "as"</a></li>
</ul>
</li>
<li><a href="#_about_this_document">10. Об этом документе</a></li>
</ul>
</div>
</div>
<div style="" id="content">
<div style="" class="sect1">
<h2 style="" id="_why">1. Зачем</h2>
<div style="" class="sectionbody">
<div style="" class="paragraph">
<p style="">Существует множество книг и источников о Паскале, 
но слишком много из них говорят о старом Паскале, без классов, юнитов, дженериках.</p>
</div>
<div style="" class="paragraph">
<p style=""> Поэтому я написал это быстрое введение о том , что я называю  <strong>современным Object Pascal</strong>. Большинство программистов используют его ,действительно не называя так <em style="">"современный Object Pascal"</em>, мы просто называем <em>"наш Pascal"</em>.
 Но представляя язык, Я считаю выжным подчеркнуть,
что это современный, объектно-ориентированных язык. Он <strong>сильно</strong> эволюционировал от старого (Turbo) Pascal, который изучал каждый школьник давным давно.
  Сравнительно, Он вполне похож на  C++, Java или C#.</p>
</div>
<div style="" class="ulist">
<ul style="">
<li>
<p>Он имеет все современные особенности, которые ты ждешь — классы, юниты, интерфейсы, дженерики…​</p>
</li>
<li>
<p>Он компилируется в быстрый машинный код,</p>
</li>
<li>
<p>Он очень типо-безопасен,</p>
</li>
<li style="">
<p style="">Высокоуровненвый, но может быть низкоуровневым если тебе это необходимо.</p>
</li>
</ul>
</div>
<div style="" class="paragraph">
<p style="">Он так же имеет превосходных, портативный компилятов с открытым кодом названным <em>Free Pascal Compiler</em>, <a href="http://freepascal.org/" class="bare">http://freepascal.org/</a> . И сопровождаемая IDE (редактор, отладичк, бибиотека компонентов, создатель форм), названная <em>Lazarus</em> <a style="" href="http://lazarus.freepascal.org/" class="bare">http://lazarus.freepascal.org/</a> . От себя , Я создатель <em>Castle Game Engine</em>, <a href="http://castle-engine.sourceforge.net/" class="bare">http://castle-engine.sourceforge.net/</a>
 , который является крутым портавтивным 3D и 2D game движком, исплользующим этот язык, чтобы 
 создавать игры для многих платформ (Windows, Linux, MacOSX, Android, iOS, 
web плагины).</p>
</div>
<div class="paragraph">
<p>Это введение больше направленно на программистов, которые уже имеют опыт в других языках. Мы не будем раскрывать здесь значения 
некоторых универсальных концепций, как <em>"что такое класс"</em>, мы только покажем как они реальизуются в Pascal.</p>
</div>
</div>
</div>
<div style="" class="sect1">
<h2 id="_basics">2. Основы</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="__hello_world_program">2.1. Программа "Hello world"</h3>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span> <span class="comment">// Используй только эту строчку во всех современных исходниках</span>

<span class="keyword">program</span> MyProgram; <span class="comment">// Сохрани этот файл как  myprogram.lpr</span>
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Hello world!</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Это полная программа, которую ты можешь <em>скомпилировать</em> и <em>запустить</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Если ты испльзуешь командную строку  FPC, просто создай новый файл <code>myprogram.lpr</code> и исполни <code>fpc myprogram.lpr</code>.</p>
</li>
<li>
<p>Если ты исплользуешь <em>Lazarus</em>, создай новый проект (menu <em>Project</em> → <em>New Project</em> → <em>Simple Program</em>). Сохрание его как <code>myprogram</code> и вставь этот исходный код как основной. Скпомилируй, используя в меню вкладку <em>Run → Compile</em>.</p>
</li>
<li>
<p>Это программа командной строки, так что ,в любом случае, - просто запусти скомпилированный исполняемый файл из командной строки.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Остальная часть этой статьи рассазывает об языке Object Pascal, поэтому 
не жди увидпть что-нибудь более причудливое/модное, кроме командной строки. Если 
ты хочешь увидеть что-нибудь крутое, просто создай новый GUI проект в  <em>Lazarus</em> (<em>Project</em> → <em>New Project</em> → <em>Application</em>).
Voila
 — рабочее GUI приложение, кроссплатформенное, с нативным видом 
, испльзующее удобные визуальные библиотеки. <em>Lazarus</em> и <em>Free Pascal Compiler</em>
 приходят с множетвом готовых частей для сетей, GUI, базданных, файловых форматов (XML, json, images…​), потоков и другим, в чем ты можешь нуждаться. Я уже упомянал о моем крутом <em>Castle Game Engine</em> ранее:)</p>
</div>
</div>
<div class="sect2">
<h3 id="_functions_procedures_primitive_types">2.2. Функции, процедуры, простейшие типы</h3>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>

<span class="keyword">program</span> MyProgram;

<span class="keyword">procedure</span> MyProcedure(<span class="keyword">const</span> A: Integer);
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">A + 10 is: </span><span class="delimiter">'</span></span>, A + <span class="integer">10</span>);
<span class="keyword">end</span>;

<span class="keyword">function</span> MyFunction(<span class="keyword">const</span> S: <span class="keyword">string</span>): <span class="keyword">string</span>;
<span class="keyword">begin</span>
  Result := S + <span class="string"><span class="delimiter">'</span><span class="content">strings are automatically managed</span><span class="delimiter">'</span></span>;
<span class="keyword">end</span>;

<span class="keyword">var</span>
  X: Single;
<span class="keyword">begin</span>
  Writeln(MyFunction(<span class="string"><span class="delimiter">'</span><span class="content">Note: </span><span class="delimiter">'</span></span>));
  MyProcedure(<span class="integer">5</span>);

  <span class="comment">// Результат деления оператором "/" всегда вещественное число, используй "div" для целочисленного деления</span>
  X := <span class="integer">15</span> / <span class="integer">5</span>;
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">X is now: </span><span class="delimiter">'</span></span>, X); <span class="comment">// scientific notation</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">X is now: </span><span class="delimiter">'</span></span>, X:<span class="integer">1</span>:<span class="integer">2</span>); <span class="comment">// 2 decimal places</span>
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Чтобы вернуть значение функции, присвой что-нибудь магическое переменной <code>Result</code>. Ты можешь свободно читать и устанавливать переменную <code>Result</code>, так же просто как локальную переменную.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">function</span> MyFunction(<span class="keyword">const</span> S: <span class="keyword">string</span>): <span class="keyword">string</span>;
<span class="keyword">begin</span>
  Result := S + <span class="string"><span class="delimiter">'</span><span class="content">something</span><span class="delimiter">'</span></span>;
  Result := Result + <span class="string"><span class="delimiter">'</span><span class="content"> something more!</span><span class="delimiter">'</span></span>;
  Result := Result + <span class="string"><span class="delimiter">'</span><span class="content"> and more!</span><span class="delimiter">'</span></span>;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ты так же можешь рассмативать имя функции  (как <code>MyFunction</code> в
 примере выше) как переменную, к который ты можешь присваивать. Но я бы 
 припятсвовал этому в новом коде, так как это выгладит "тусклым/подозрительным" когда использвано на правой стороне 
присваимого выражение. Просто используй <code>Result</code> всегда, 
когда ты хочешь читать или устанавливать значение функции. Если ты хочешь вызвать 
функцию рекурсивно, ты кончено можешь сделать это, но не забудь указать
 специальные параметры (такой рекурсивный вызов с параметром получает другой результат в отличии от резульата доступа к текущему результату функции). Так:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">function</span> ReadIntegersUntilZero: <span class="keyword">string</span>;
<span class="keyword">var</span>
  I: Integer;
<span class="keyword">begin</span>
  Readln(I);
  Result := IntToStr(I);
  <span class="keyword">if</span> I &lt;&gt; <span class="integer">0</span> <span class="keyword">then</span>
    Result := Result + <span class="char"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span> + ReadIntegersUntilZero();
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ты можешь вызвать <code>Exit</code>, чтобы окончить выполнение процедуры или функции до того, как она достигнет заверщаюгего <code>end;</code>. Если ты вызываешь без параметров <code>Exit</code> в функции, она вернет последнее, что ты присовоил <code>Result</code>. Ты так же можешь использовать конструкцию <code>Exit(X)</code> , чтобы установить результат функции и выйти <strong>сейчас</strong> — это тоже что и <code>return X</code> конструкция в С-подобных языках.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">function</span> AddName(<span class="keyword">const</span> ExistingNames, NewName: <span class="keyword">string</span>): <span class="keyword">string</span>;
<span class="keyword">begin</span>
  <span class="keyword">if</span> ExistingNames = <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span> <span class="keyword">then</span>
    Exit(NewName);
  Result := ExistingNames + <span class="string"><span class="delimiter">'</span><span class="content">, </span><span class="delimiter">'</span></span> + NewName;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_testing_if">2.3. Проверка (if))</h3>
<div class="paragraph">
<p>Use <code>if .. then</code> или <code>if .. then .. else</code> запускает
 некий код, когда некое условие удовлетворительно. В отличии от C-подобных 
языков, в Pascal тебе не нужно ставить в скобки условие.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">var</span>
  A: Integer;
  B: boolean;
<span class="keyword">begin</span>
  <span class="keyword">if</span> A &gt; <span class="integer">0</span> <span class="keyword">then</span>
    DoSomething;

  <span class="keyword">if</span> A &gt; <span class="integer">0</span> <span class="keyword">then</span>
  <span class="keyword">begin</span>
    DoSomething;
    AndDoSomethingMore;
  <span class="keyword">end</span>;

  <span class="keyword">if</span> A &gt; <span class="integer">10</span> <span class="keyword">then</span>
    DoSomething <span class="keyword">else</span>
    DoSomethingElse;

  <span class="comment">// equivalent to above</span>
  B := A &gt; <span class="integer">10</span>;
  <span class="keyword">if</span> B <span class="keyword">then</span>
    DoSomething <span class="keyword">else</span>
    DoSomethingElse;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Оператор <code>else</code> относится к полседнему условию <code>if</code>. Поэтому оно работает, как ты и ожидаешь:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">if</span> A &lt;&gt; <span class="integer">0</span> <span class="keyword">then</span>
  <span class="keyword">if</span> B &lt;&gt; <span class="integer">0</span> <span class="keyword">then</span>
    AIsNonzeroAndBToo <span class="keyword">else</span>
    AIsNonzeroButBIsZero;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Обертывание вложения <code>if</code> внутри <code>begin</code> …​ <code>end</code>
 часто лучше, чем предыдущий пример. Оно более очевидно читателю ,
даже если ты перемешаешь, испортишь отступы. И когда ты добавляешь / удаляешь 
некий <code>else</code> пункт в коде ниже, оно очевидно к какому условию оно применяется(<code>A</code> тестируется или <code>B</code> тестируется), поэтому оно мене подвержено ошибкам.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">if</span> A &lt;&gt; <span class="integer">0</span> <span class="keyword">then</span>
<span class="keyword">begin</span>
  <span class="keyword">if</span> B &lt;&gt; <span class="integer">0</span> <span class="keyword">then</span>
    AIsNonzeroAndBToo <span class="keyword">else</span>
    AIsNonzeroButBIsZero;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_logical_relational_and_bit_wise_operators">2.4. Логические операторы, операторы отношений and битовые операторы</h3>
<div class="paragraph">
<p><em>Логические операторы</em>  - это <code>and</code>, <code>or</code>, <code>not</code>, <code>xor</code>. Их значение, вероятно, очевидно(ищи  <em>"исключающее or"</em> если ты не уверен что такое <em>xor</em> :). Они берут <em>аргументы типа boolean</em>, и возвращают зачение типа <em>boolean</em>. Они так же могут работать как <em>битовые операторы</em>, когда оба аргумента целого типа, в каждом случае возвращая занчени целого типа(integer).</p>
</div>
<div class="paragraph">
<p><em>Операторы отношения (сравнения)</em> - это <code>=</code>, <code>&lt;&gt;</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.
 Если ты привык к С-подобным языкам заметь, что в Паскале ты сравниваешь два значение(проверяешь соответствие), используя простейшее равенство <code>A = B</code> (в отличии от С, где ты использвешь код <code>A == B</code>). Специальным <em>оператором присваивания</em> в паскале является <code>:=</code>.</p>
</div>
<div class="paragraph">
<p><em>Логический (или битовый)</em> оператор имеет приоритет выше, чем операторы отношения. Поэтому тебе может понадобиться использовать круглые скобки вокруг некоторых выражений.</p>
</div>
<div class="paragraph">
<p>Например, здесь ошибка компиляции:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">var</span>
  A, B: Integer;
<span class="keyword">begin</span>
  <span class="keyword">if</span> A = <span class="integer">0</span> <span class="keyword">and</span> B &lt;&gt; <span class="integer">0</span> <span class="keyword">then</span> ... <span class="comment">// INCORRECT example</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Здесь выше ошибки компиляции, потомучто компилятор видет побитовый оператор <code>and</code> внутри: <code>(0 and B)</code>.</p>
</div>
<div class="paragraph">
<p>Это верное:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">var</span>
  A, B: Integer;
<span class="keyword">begin</span>
  <span class="keyword">if</span> (A = <span class="integer">0</span>) <span class="keyword">and</span> (B &lt;&gt; <span class="integer">0</span>) <span class="keyword">then</span> ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>Используется <em>оценка короткого замыкания</em>. Рассмотрим это выражение :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">if</span> MyFunction(X) <span class="keyword">and</span> MyOtherFunction(Y) <span class="keyword">then</span>...</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Оно гарантирует что <code>MyFunction(X)</code> будет оценеваться первым.</p>
</li>
<li>
<p>И если <code>MyFunction(X)</code> возвращает <code>false</code>, тогда значение выражение будет известно(значение <code>false</code>  любом случае есть всегда<code>false</code>), и <code>MyOtherFunction(Y)</code> вообще никогда не будет исполнена.</p>
</li>
<li>
<p>Анологиченое правило для выражения с <code>or</code>. Здесь, если выражение, как известно, <code>true</code> (потому, что первый операнд if есть <code>true</code>), второй оператор не будет оцениваться.</p>
</li>
<li>
<p>Это особенно полезно,  когда написанное выражение, как </p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">if</span> (A &lt;&gt; <span class="keyword">nil</span>) <span class="keyword">and</span> A.IsValid <span class="keyword">then</span>...</code></pre>
</div>
</div>
<div class="paragraph">
<p>Данное выражение будет работать хорошо, даже когда <code>A</code> равно <code>nil</code>.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_testing_single_expression_for_multiple_values_case">2.5. Проверка выражения на множественные значения (case)</h3>
<div class="paragraph">
<p>Если то или иное действие должно быть исполнено и оно зависит от значение самого выражения, тогда конструкция <code>case .. of .. end</code> будет полезной.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">case</span> SomeValue <span class="keyword">of</span>
  <span class="integer">0</span>: DoSomething;
  <span class="integer">1</span>: DoSomethingElse;
  <span class="integer">2</span>: <span class="keyword">begin</span>
       IfItsTwoThenDoThis;
       AndAlsoDoThis;
     <span class="keyword">end</span>;
  <span class="integer">3</span>..<span class="integer">10</span>: DoSomethingInCaseItsInThisRange;
  <span class="integer">11</span>, <span class="integer">21</span>, <span class="integer">31</span>: AndDoSomethingForTheseSpecialValues;
  <span class="keyword">else</span> DoSomethingInCaseOfUnexpectedValue;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Условие<code>else</code> опционально. Когда нет соответсвия условиям, и нет условия <code>else</code>, тогда ничего не произойдет.</p>
</div>
<div class="paragraph">
<p>Если вы пришли из С-подобных языков, и сравниваете это с <code>switch</code> конструкцией в этих языках, вы заметите что нет автоматической <em>неудачи</em>. Это особенное благословение в Паскале. Ты не должен помнить поместить <code>break</code>. В каждом исполнении, <em>не более одной</em> ветви <code>case</code> исполняется, вот так.</p>
</div>
</div>
<div class="sect2">
<h3 id="_enumerated_and_ordinal_types_and_sets_and_constant_length_arrays">2.6. Перечисляемый и порядковый типы, наборы и массивы постоянной длины</h3>
<div class="paragraph">
<p>Перечисляемый тип в паскале очень хорош и непрозрачный. Вы возможно будете использовать его чеще чем перечисляемые типы в других языках:)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TAnimalKind = (akDuck, akCat, akDog);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Соглашение состоит в том, что префикс перечисляемого типо состоит из двух букв сокращения имени типа, следовательно <code>ak</code> = скоращение для <em>"Animal Kind"</em>. Это полезное соглашение, так как именя перечесляемых типов находятся в глобальном пространстве юнита. Так с помощью префикса <code>ak</code> , ты уменьшаешь шансы на столкновение с другими идентификаторами</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Примечание</div>
</td>
<td class="content">
Столкновения в именах не заканчивают шоу. 
Это нормально в различных юнитах определать одинаковые идентификаторы.
Но хорошой идеей является попытка избежать столкновений в любом случае, 
чтобы код был прост в понимании и грепа<i>( от GREP "команда UNIX для поиска специфического символа строки или текстовой структуры в файле")</i>.
</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Примечание</div>
</td>
<td class="content">
Ты можешь избежать помещение имен перечисляемых типов в глобальное пространство с помощью дерективы <code>{$scopedenums on}</code>. Это значит, что ты должен будешь обращаться к ним с помощью обращения к имени типа, как <code>TAnimalKind.akDuck</code>. Нужда в префиксе <code>ak</code> исчезает в этой ситуации, и ты возможно будешь вызывать только перечисляемый список <code>Duck, Cat, Dog</code>. Это похоже на перечисляемые списки C#.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Факт того, что перечесляемый тип  <em>непрозрачен</em> т.е. не может быть просто присвоен к целому и присвоен из целого. Тем не менее, для специального использования, ты можешь исплользовать <code>Ord(MyAnimalKind)</code>, чтобы насильно привести список к целому типу, или дать подходящюю роль <code>TAnimalKind(MyInteger)</code> чтобы конвертировать integer к перечесляемому типу. В последнем случае, проверь является ли <code>MyInteger</code> часттю диапазона (0 to <code>Ord(High(TAnimalKind))</code>).</p>
</div>
<div class="paragraph">
<p>Перечисляемые и порядковые типы могут быть использованы как индексы массива:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TArrayOfTenStrings = <span class="keyword">array</span> [<span class="integer">0</span>..<span class="integer">9</span>] <span class="keyword">of</span> <span class="keyword">string</span>;
  TArrayOfTenStrings1Based = <span class="keyword">array</span> [<span class="integer">1</span>..<span class="integer">10</span>] <span class="keyword">of</span> <span class="keyword">string</span>;

  TMyNumber = <span class="integer">0</span>..<span class="integer">9</span>;
  TAlsoArrayOfTenStrings = <span class="keyword">array</span> [TMyNumber] <span class="keyword">of</span> <span class="keyword">string</span>;

  TAnimalKind = (akDuck, akCat, akDog);
  TAnimalNames = <span class="keyword">array</span> [TAnimalKind] <span class="keyword">of</span> <span class="keyword">string</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Они так же могут быть использованы для создания наборов(внутренне битовое поле):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TAnimalKind = (akDuck, akCat, akDog);
  TAnimals = <span class="keyword">set</span> <span class="keyword">of</span> TAnimalKind;
<span class="keyword">var</span>
  A: TAnimals;
<span class="keyword">begin</span>
  A := [];
  A := [akDuck, akCat];
  A := A + [akDog];
  A := A * [akCat, akDog];
  Include(A, akDuck);
  Exclude(A, akDuck);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_loops_for_while_repeat_for_in">2.7. Циклы (for, while, repeat, for .. in)</h3>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="preprocessor">{$R+}</span> <span class="comment">// проверка диапазона включены - хорошо для отладки</span>
<span class="keyword">var</span>
  MyArray: <span class="keyword">array</span> [<span class="integer">0</span>..<span class="integer">9</span>] <span class="keyword">of</span> Integer;
  I: Integer;
<span class="keyword">begin</span>
  <span class="comment">// инициализация</span>
  <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> <span class="integer">9</span> <span class="keyword">do</span>
    MyArray[I] := I * I;

  <span class="comment">// показ</span>
  <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> <span class="integer">9</span> <span class="keyword">do</span>
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Square is </span><span class="delimiter">'</span></span>, MyArray[I]);

  <span class="comment">// делает тоже что и выше</span>
  <span class="keyword">for</span> I := Low(MyArray) <span class="keyword">to</span> High(MyArray) <span class="keyword">do</span>
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Square is </span><span class="delimiter">'</span></span>, MyArray[I]);

  <span class="comment">// делает тоже что и выше</span>
  I := <span class="integer">0</span>;
  <span class="keyword">while</span> I &lt; <span class="integer">10</span> <span class="keyword">do</span>
  <span class="keyword">begin</span>
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Square is </span><span class="delimiter">'</span></span>, MyArray[I]);
    I := I + <span class="integer">1</span>; <span class="comment">// or "I += 1", or "Inc(I)"</span>
  <span class="keyword">end</span>;

  <span class="comment">// делает тоже что и выше</span>
  I := <span class="integer">0</span>;
  <span class="keyword">repeat</span>
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Square is </span><span class="delimiter">'</span></span>, MyArray[I]);
    Inc(I);
  <span class="keyword">until</span> I = <span class="integer">10</span>;

  <span class="comment">// делает тоже что и выше</span>
  <span class="keyword">for</span> I <span class="keyword">in</span> MyArray <span class="keyword">do</span>
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Square is </span><span class="delimiter">'</span></span>, I);
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Различные замечания:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Может казаться, что различие между <code>while</code> и <code>repeat</code> циклами  "косметические" (ты определяешь отрицательное условие потому, что в <code>while .. do</code> ты говоришь это <em>когда продолжаешь</em>, но в <code>repeat .. until</code> ты говоришь это  <em>когда заканчиваешь</em>). В действительности есть другое важное отличие: в случае <code>repeat</code>, <em>условие не проверяется в начале</em>. Поэтому цикл <code>repeat</code>  всегда выполняется минимум один раз.</p>
</li>
<li>
<p>Конструкция <code>for I := .. to .. do …​</code> похоже на C-подобный цикл <code>for</code>
. Тем не менее, оно более ограничено, как вы не можете указать произвольное действие/тесты  
чтобы контролировать итерации цикла. Это строго для  
итерации через последовательные числа (или другие порядковые типы). Еденственной уступок, который у вас есть - это использование <code>downto</code> вместо <code>to</code>, чтобы делать числа в обратном порядке.</p>
<div class="paragraph">
<p>В замен, это выглядит чисто, и очень оптимизировано в исполнении. В особенности, <em>выражение верхней и нижней границы вычисляется один раз</em>, до начала цикла.</p>
</div>
</li>
<li>
<p>Цикл<code>for I in .. do ..</code> такой же как конструкция <code>foreach</code> в многих современных языках. Он точно работает для всех встроенных типов:</p>
<div class="ulist">
<ul>
<li>
<p>Он может перебирать все значения массива (пример выше).</p>
</li>
<li>
<p>Он может перебирать все возможные значения перечисляемого типа:</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">var</span>
  AK: TAnimalKind;
<span class="keyword">begin</span>
  <span class="keyword">for</span> AnimalKind <span class="keyword">in</span> TAnimalKind <span class="keyword">do</span>...</code></pre>
</div>
</div>
</li>
<li>
<p>Он может перебирать все элементы набора:</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">var</span>
  Animals: TAnimals;
  AK: AnimalKind;
<span class="keyword">begin</span>
  Animals := [akDog, akCat];
  <span class="keyword">for</span> AK <span class="keyword">in</span> Animals <span class="keyword">do</span> ...</code></pre>
</div>
</div>
</li>
<li>
<p>И так же работает на всех пользовательких/кастомных типах, родовых или нет, как <code>TObjectList</code> или <code>TFPGObjectList</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils, FGL;

<span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
    I, Square: Integer;
  <span class="keyword">end</span>;
  TMyClassList = specialize TFPGObjectList&lt;TMyClass&gt;;

<span class="keyword">var</span>
  List: TMyClassList;
  C: TMyClass;
  I: Integer;
<span class="keyword">begin</span>
  List := TMyClassList.Create(true); <span class="comment">// true = имеет потомков</span>
  <span class="keyword">try</span>
    <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> <span class="integer">9</span> <span class="keyword">do</span>
    <span class="keyword">begin</span>
      C := TMyClass.Create;
      C.I := I;
      C.Square := I * I;
      List.Add(C);
    <span class="keyword">end</span>;

    <span class="keyword">for</span> C <span class="keyword">in</span> List <span class="keyword">do</span>
      Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Square of </span><span class="delimiter">'</span></span>, C.I, <span class="string"><span class="delimiter">'</span><span class="content"> is </span><span class="delimiter">'</span></span>, C.Square);
  <span class="keyword">finally</span> FreeAndNil(List) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Мы еще не объяснили концепцию классов, поэтому последний пример может быть еще для тебя очевидным, просто продолжай, 
он будет понятен позднее:)</p>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_output_logging">2.8. Вывод, логирование(ведение журнала)</h3>
<div class="paragraph">
<p>Чтобы просто вывести строки в Паскале используй шаблон <code>Write</code> или <code>Writeln</code>. Последнне автомачески переводит на новую строку/ставит перенос каретки.</p>
</div>
<div class="paragraph">
<p>Это "магия" шаблонов в Паскале, Оно принимает переменное число аргументов
и оно может иметь любой тип. Они все будут приведены к строкам 
при выводе, с с некоторым специальным синтаксисом для указания отступов и
номера точности.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Hello world!</span><span class="delimiter">'</span></span>);
Writeln(<span class="string"><span class="delimiter">'</span><span class="content">You can output an integer: </span><span class="delimiter">'</span></span>, <span class="integer">3</span> * <span class="integer">4</span>);
Writeln(<span class="string"><span class="delimiter">'</span><span class="content">You can pad an integer: </span><span class="delimiter">'</span></span>, <span class="integer">666</span>:<span class="integer">10</span>);
Writeln(<span class="string"><span class="delimiter">'</span><span class="content">You can output a float: </span><span class="delimiter">'</span></span>, Pi:<span class="integer">1</span>:<span class="integer">4</span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Чтобы явно завершить строку ислпоьзуй константу<code>LineEnding</code> (FPC RTL) (<em>Castle Game Engine</em> имеет также краткий вариант <code>NL</code>). Паскаль не отображает специальные символы с обратной чертой, так написание</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">Writeln(<span class="string"><span class="delimiter">'</span><span class="content">One line.\nSecond line.</span><span class="delimiter">'</span></span>); <span class="comment">// НЕВЕРНЫЙ пример</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>не работает как бы ты мог думать. Это будет работать:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">Writeln(<span class="string"><span class="delimiter">'</span><span class="content">One line.</span><span class="delimiter">'</span></span> + LineEnding + <span class="string"><span class="delimiter">'</span><span class="content">Second line.</span><span class="delimiter">'</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>или это:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">Writeln(<span class="string"><span class="delimiter">'</span><span class="content">One line.</span><span class="delimiter">'</span></span>);
Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Second line.</span><span class="delimiter">'</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Заметь это будет работать только в <em>консольных</em> приложениях. Удостоверься у тебя <code>{$apptype CONSOLE}</code> (и <strong>not</strong> <code>{$apptype GUI}</code>)
 определено в основном файле программы. На некоторых ОС это неважно 
и работает всегда (Unix), но некоторые ОС
пытаются написать что-то из  GUI приложения, что ведет к ошибке(Windows).</p>
</div>
<div class="paragraph">
<p><strong>В the Castle Game Engine:</strong> используй <code>WritelnLog</code>, но никогда <code>Writeln</code>.
 Это будет всегда относиться к некоторому полезному выводу. В Unix, стандарт 
output. В Windows GUI application, log file. В Android, <em>Android logging facility(объект Андроид логирования)</em> (виден когда ты используешь <code>adb logcat</code>).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_units">3. Юниты</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Юниты позволяют тебе групировать общие вещи(любое, что может быть 
объявлено), для использования другими юнитами и программами. Они эквиваленты 
 <em>модулям</em> и <em>пакетам</em> в других языках. Они имеют секцию интерфейса 
, где ты объявляешь что доступно для других юнитов 
и программ, и их реализация. Сохрани юнит <code>MyUnit</code> как <code>myunit.pas</code> ( <code>.pas</code> расширение).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">unit</span> MyUnit;
<span class="keyword">interface</span>

<span class="keyword">procedure</span> MyProcedure(<span class="keyword">const</span> A: Integer);
<span class="keyword">function</span> MyFunction(<span class="keyword">const</span> S: <span class="keyword">string</span>): <span class="keyword">string</span>;

<span class="keyword">implementation</span>

<span class="keyword">procedure</span> MyProcedure(<span class="keyword">const</span> A: Integer);
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">A + 10 is: </span><span class="delimiter">'</span></span>, A + <span class="integer">10</span>);
<span class="keyword">end</span>;

<span class="keyword">function</span> MyFunction(<span class="keyword">const</span> S: <span class="keyword">string</span>): <span class="keyword">string</span>;
<span class="keyword">begin</span>
  Result := S + <span class="string"><span class="delimiter">'</span><span class="content">strings are automatically managed</span><span class="delimiter">'</span></span>;
<span class="keyword">end</span>;

<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Финальная программа созранена как <code>myprogram.lpr</code> файлы(<code>lpr</code> = Lazarus program file; в Delphi ты используешь <code>.dpr</code>). Заметь что другие окончания возможны здесь, например, некоторые проекты просто испльзуют <code>.pas</code> основным файлом программы, некоторые используют <code>.pp</code> для юнитов или других программ. Я советую использовать <code>.pas</code> для юнитов и <code>.lpr</code> для FPC/Lazarus программ.</p>
</div>
<div class="paragraph">
<p>Программа может использовать юнит с помощью ключевого слова<code>uses</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>

<span class="keyword">program</span> MyProgram;

<span class="keyword">uses</span> MyUnit;

<span class="keyword">var</span>
  X: Single;
<span class="keyword">begin</span>
  Writeln(MyFunction(<span class="string"><span class="delimiter">'</span><span class="content">Note: </span><span class="delimiter">'</span></span>));
  MyProcedure(<span class="integer">5</span>);
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_units_using_each_other">3.1. Юниты, использующие друг друга</h3>
<div class="paragraph">
<p>Один юнит может использовать другой юнит. Другой юнит может быть использована в  
секции интерфейсов, или только в секции implementation. Шаблон 
позволяет определять новые публичные вещи(stuff)(процедуры, типы…​) в шапке  
друого юнита. Последнее более ограничино (если ты исплользуешь юнит только в
 implementation, ты можешь использовать его идентификаторы только в твоем implementation).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">unit</span> AnotherUnit;
<span class="keyword">interface</span>

<span class="keyword">uses</span> Classes;

<span class="comment">{ Тип "TComponent" (class) определен в сеции классов юнита.
  Поэтому мы должны использовать юнит классов выше. }</span>
<span class="keyword">procedure</span> DoSomethingWithComponent(<span class="keyword">var</span> C: TComponent);

<span class="keyword">implementation</span>

<span class="keyword">uses</span> SysUtils;

<span class="keyword">procedure</span> DoSomethingWithComponent(<span class="keyword">var</span> C: TComponent);
<span class="keyword">begin</span>
  <span class="comment">{ Процедура FreeAndNil определена в юните SysUtils.
    С этимх пор мы обращаемся к его имени в  implementation,
    Все будет нормально если использовать юнит SysUtils в секции"implementation". }</span>
  FreeAndNil(C);
<span class="keyword">end</span>;

<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Невозможно иметь <em>кольцевую зависимость юнитов в interface</em>.
 Это значит, два юнита не могут использовать друг друга в секции interface. Причиной этого -  
что угодно должно быть определено до его использования. Чтобы
 "понимать" (например, решени о компоновке памяти под структуры) секцию
interface юнита, компилятор должен первый делом "понять" все 
все юниты, которые он использует в секции interface. Pascal следует строго следует этому правилу
, результатом которого является быстрая компиляция, но также создание 
кольцевых зависимостей<em>между interface юнитов</em> невозможно.</p>
</div>
<div class="paragraph">
<p><em>ХОРОШО создавать кольцевые зависимости между юнитами когда по крайней мере "использовано" только в implementation</em>. Поэтому нормально для <code>A</code> использовать <code>B</code> в interface, и затем юнит <code>B</code> исползует <code>A</code> в implementation.</p>
</div>
</div>
<div class="sect2">
<h3 id="_qualifying_identifiers_with_unit_name">3.2. Определенипе идентификаторов с именем юнита</h3>
<div class="paragraph">
<p>Различные юниты могут определять одинаковые идентификаторы. Чтобы поддерживать код простым 
для чтения и поиска, ты должен обычно избегать этого,но это не всегда возможно.
В таких случаях, последний юнит в <code>uses</code> условии "побеждает", которое значит что новые определенные идентификаторы скрывают такие же идетификаторы вводимые другими юнитами ранее.</p>
</div>
<div class="paragraph">
<p>Ты можешь всегда недвусмысленно определить юнит дающео идентификатор, исползуя как <code>MyUnit.MyIdentifier</code>. Это обычное решение когда используемый идентификатор из <code>MyUnit</code>
 скрыт в другом юните. Конечно ты так же можешь перестроить порядок 
юнитов в твоем объявлении uses, хотя это можеть действовать на другие 
объявления, которые ты пытаешься исправить.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">program</span> showcolor;

<span class="comment">// Graphics и GoogleMapsEngine юниты определяют тип TColor.</span>
<span class="keyword">uses</span> Graphics, GoogleMapsEngine;

<span class="keyword">var</span>
  <span class="comment">{ Это не работает как мы хотим, т.к. TColor кончается определением от GoogleMapsEngine. }</span>
  <span class="comment">// Color: TColor;</span>
  <span class="comment">{ Это работает. }</span>
  Color: Graphics.TColor;
<span class="keyword">begin</span>
  Color := clYellow;
  Writeln(Red(Color), <span class="char"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>, Green(Color), <span class="char"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>, Blue(Color));
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>В случае юнитов, помни , что они имеют два пункта <code>uses</code>: идин - в interface, другой - в implementation. Правило -  <em>Позднейшие юниты скрывают все что было делают предыдущие юниты</em> и пременяется последовательно, что значит <em>юниты использованые в секции implementation</em> могут скрывать идентификаторы из юнитов <em>использованных в interface секции</em>. Тем не менее, помни, что когда происходит чтение <code>interface</code>
, только юниты использованные в секции interface имеют значение. Это может смутить в ситуации, где два на вид одинаковых объявления определяются
по разному компилятором:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">unit</span> UnitUsingColors;

<span class="comment">// НЕВЕРНЫЙ пример</span>

<span class="keyword">interface</span>

<span class="keyword">uses</span> Graphics;

<span class="keyword">procedure</span> ShowColor(<span class="keyword">const</span> Color: TColor);

<span class="keyword">implementation</span>

<span class="keyword">uses</span> GoogleMapsEngine;

<span class="keyword">procedure</span> ShowColor(<span class="keyword">const</span> Color: TColor);
<span class="keyword">begin</span>
  <span class="comment">// Writeln(ColorToString(Color));</span>
<span class="keyword">end</span>;

<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Юнит <code>Graphics</code> (из Lazarus LCL) определяет тип <code>TColor</code>. Но  компилятор выдаст ошибку в этом юните, заявляя что ты не описал процедуру <code>ShowColor</code>, которая соответсвует декларации interface. Проблема в том, что юнит <code>GoogleMapsEngine</code> так же определяет тип <code>TColor</code>. И оно используется только в секции <code>implementation</code>, следовательно оно <em>перекрывает</em> определение <code>TColor</code> только в implementation. Эквивален этого, где ошибка очевидна тут:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">unit</span> UnitUsingColors;

<span class="comment">// НЕВЕРНЫЙ пример.</span>
<span class="comment">// Это то что компилятор "видит" когда пытается откомпилировать предыдущий пример</span>

<span class="keyword">interface</span>

<span class="keyword">uses</span> Graphics;

<span class="keyword">procedure</span> ShowColor(<span class="keyword">const</span> Color: Graphics.TColor);

<span class="keyword">implementation</span>

<span class="keyword">uses</span> GoogleMapsEngine;

<span class="keyword">procedure</span> ShowColor(<span class="keyword">const</span> Color: GoogleMapsEngine.TColor);
<span class="keyword">begin</span>
  <span class="comment">// Writeln(ColorToString(Color));</span>
<span class="keyword">end</span>;

<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Решение в данном случае тривиальное, просто поменяй implementation,чтобы явно использовать <code>TColor</code> из юнита<code>Graphics</code>. Ты мог испавить это передвинув <code>GoogleMapsEngine</code> в секцию interface и ранее чем <code>Graphics</code>, так же это могло бы быть результативным в реальности, когда <code>UnitUsingColors</code> объявлял бы больше всякой всячины.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">unit</span> UnitUsingColors;

<span class="keyword">interface</span>

<span class="keyword">uses</span> Graphics;

<span class="keyword">procedure</span> ShowColor(<span class="keyword">const</span> Color: TColor);

<span class="keyword">implementation</span>

<span class="keyword">uses</span> GoogleMapsEngine;

<span class="keyword">procedure</span> ShowColor(<span class="keyword">const</span> Color: Graphics.TColor);
<span class="keyword">begin</span>
  <span class="comment">// Writeln(ColorToString(Color));</span>
<span class="keyword">end</span>;

<span class="keyword">end</span>.</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_one_unit_identifiers_from_another">3.3. Испоьзование идентификаторов одного юнита в другом</h3>
<div class="paragraph">
<p>Иногда тебе нужно взять идентификатор из одного юнита, и <em>использовать/изменять</em> его в другом юните. Результатом должно быть тем, что использование нового юнита делает идентификатор доступным в пространстве имен.</p>
</div>
<div class="paragraph">
<p>Иногда это необходимо для сохранения совместимости с предыдущими версиями версиями юнита. Иногда неплохо  "скрыть" внутренний unit 
в данной ситуации.</p>
</div>
<div class="paragraph">
<p>Это может быть осуществлено с помощью переопределения идетификатора в твоем новом юните.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">unit</span> MyUnit;

<span class="keyword">interface</span>

<span class="keyword">uses</span> Graphics;

<span class="keyword">type</span>
  <span class="comment">{ Использован TColor из юнита Graphics в качестве TMyColor. }</span>
  TMyColor = TColor;

  <span class="comment">{ В качестве алтернатвы, назови его тем же именем.
	Соотнеси с имененм юнита в данном случае, в противном случае он должен будет обращаться к своему определению
	с помощью "TColor = TColor". }</span>
  TColor = Graphics.TColor;

<span class="keyword">const</span>
  <span class="comment">{ Тоже работает и с константами. }</span>
  clYellow = Graphics.clYellow;
  clBlue = Graphics.clBlue;

<span class="keyword">implementation</span>

<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Заметь, что данный трюк не пройдет с глобальными процедурами, функциями и пременными. С ними ты дожен объявить постоянный указатель на процедуру в другом юните (смотри <a href="#Callbacks">Возвращения(колбэки) </a>), но это выглядит не совсем чисто.</p>
</div>
<div class="paragraph">
<p>Обычным решением является создание тривиальной функции "обертки", которая 
под видом простого вызова функции из внешнего юнита, передает параметры и принимает значения обратно.</p>
</div>
<div class="paragraph">
<p>Чтобы проделать тоже с глобальными параметрами одни решают использовать глобальные(unit-level) свойства, смотри <a href="#_properties">Свойства</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_classes">4. Классы</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_basics_2">4.1. Основы</h3>
<div class="paragraph">
<p>У нас есть классы. На базовом уровне класс является контейнером для</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>поля</em> (забавное/модное имя для <em>"переменной внутри класса"</em>),</p>
</li>
<li>
<p><em>методы</em> (забавное/модное имя для <em>"процедуры или функции внутри класса"</em>),</p>
</li>
<li>
<p>и <em>свойства</em> (забавный/модный синтакс для чего-то на подобии поля, но по факту пара методов чтобы <em>получить</em> или <em>установить</em> что-то; поподробней в <a href="#_properties">Свойства	</a>).</p>
</li>
<li>
<p>В действительности, ты можешь поместить <a href="#_more_stuff_inside_classes_and_nested_classes">Больше вещей внуть классов и вложенных классов</a>, поговорим об этом в позже(в другом разделе).</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
    MyInt: Integer;
    <span class="keyword">procedure</span> MyMethod;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.MyMethod;
<span class="keyword">begin</span>
  Writeln(MyInt + <span class="integer">10</span>);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_inheritance_is_as">4.2. Наследование(операторы is, as)</h3>
<div class="paragraph">
<p>Мы имеем наследование и виртуальные методы.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">program</span> MyProgram;

<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
    MyInt: Integer;
    <span class="keyword">procedure</span> MyVirtualMethod; <span class="directive">virtual</span>;
  <span class="keyword">end</span>;

  TMyClassDescendant = <span class="keyword">class</span>(TMyClass)
    <span class="keyword">procedure</span> MyVirtualMethod; <span class="directive">override</span>;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.MyVirtualMethod;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClass shows MyInt + 10: </span><span class="delimiter">'</span></span>, MyInt + <span class="integer">10</span>);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClassDescendant.MyVirtualMethod;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClassDescendant shows MyInt + 20: </span><span class="delimiter">'</span></span>, MyInt + <span class="integer">20</span>);
<span class="keyword">end</span>;

<span class="keyword">var</span>
  C: TMyClass;
<span class="keyword">begin</span>
  C := TMyClass.Create;
  <span class="keyword">try</span>
    C.MyVirtualMethod;
  <span class="keyword">finally</span> FreeAndNil(C) <span class="keyword">end</span>;

  C := TMyClassDescendant.Create;
  <span class="keyword">try</span>
    C.MyVirtualMethod;
  <span class="keyword">finally</span> FreeAndNil(C) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Стандартно методы не вируальные, объяви их с<code>virtual</code> дабы сделать их таковыми. Перекрытие осущетвяется путем <code>override</code>,
в ином случае будет ошибка. Чтобы скрыть метод без перекрытия( обычно ты не хочешь это делать, пока ты знаешь что делаешь) 
используй <code>переопределение</code>.</p>
</div>
<div class="paragraph">
<p>Чтобы протестировать класс примера в режиме runtime(режим релаьного времени), используй оператор <code>is</code>. Чтобы дать подходящую роль специфическому классу используй оператор <code>as</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">program</span> is_as;

<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
    <span class="keyword">procedure</span> MyMethod;
  <span class="keyword">end</span>;

  TMyClassDescendant = <span class="keyword">class</span>(TMyClass)
    <span class="keyword">procedure</span> MyMethodInDescendant;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.MyMethod;
<span class="keyword">begin</span> Writeln(<span class="string"><span class="delimiter">'</span><span class="content">MyMethod</span><span class="delimiter">'</span></span>) <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClassDescendant.MyMethodInDescendant;
<span class="keyword">begin</span> Writeln(<span class="string"><span class="delimiter">'</span><span class="content">MyMethodInDescendant</span><span class="delimiter">'</span></span>) <span class="keyword">end</span>;

<span class="keyword">var</span>
  Descendant: TMyClassDescendant;
  C: TMyClass;
<span class="keyword">begin</span>
  Descendant := TMyClassDescendant.Create;
  <span class="keyword">try</span>
    Descendant.MyMethod;
    Descendant.MyMethodInDescendant;

    <span class="comment">{ Descendant имеет все функции от TMyClass, такое назначение нормально }</span>
    C := Descendant;
    C.MyMethod;

    <span class="comment">{ это не работает, пока  TMyClass не определить этот метод }</span>
    <span class="comment">//C.MyMethodInDescendant;</span>
    <span class="keyword">if</span> C <span class="keyword">is</span> TMyClassDescendant <span class="keyword">then</span>
      (C <span class="keyword">as</span> TMyClassDescendant).MyMethodInDescendant;

  <span class="keyword">finally</span> FreeAndNil(Descendant) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Вместо использования <code>X as TMyClass</code>, ты можешь использовать <em>непроверенное</em> приведение типа <code>TMyClass(X)</code>. Это быстрее, но результат имеет случайное поведение если <code>X</code> нет, на самом деле, <code>TMyClass</code> умер. Поэтому не исползуй приведение <code>TMyClass(X)</code>, или используй если код точно будет верен в любом случае, например прямо после тестирования с помощью <code>is</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">if</span> A <span class="keyword">is</span> TMyClass <span class="keyword">then</span>
  (A <span class="keyword">as</span> TMyClass).CallSomeMethodOfMyClass;
<span class="comment">// ниж немного быстрее</span>
<span class="keyword">if</span> A <span class="keyword">is</span> TMyClass <span class="keyword">then</span>
  TMyClass(A).CallSomeMethodOfMyClass;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_properties">4.3. Свойства</h3>
<div class="paragraph">
<p>Свойства - это очень красивый<em> "девайс(от переводчика "syntax sugar:)")"</em> чтобы </p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Сделать что-то похожее на поле (может быть прочитано и установлено) но ниже реализовано вызовом фукций <em>getter / получатель</em> и <em>setter / установщик</em> . Большое  типичное использование - это выполенение побочных действий каждый раз, когда некоторое значение меняется.</p>
</li>
<li>
<p>Сделать что-то похожее на поле, но только доступное для чтения. В результате, это что-то вроде костанты или параментра функции.</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TWebPage = <span class="keyword">class</span>
  <span class="directive">private</span>
    FURL: <span class="keyword">string</span>;
    FColor: TColor;
    <span class="keyword">function</span> SetColor(<span class="keyword">const</span> Value: TColor);
  <span class="directive">public</span>
    <span class="comment">{ Никак не установить его прямо.
      Вызови метод Load(загрузки) , так же как ('http://www.freepascal.org/'),
      чтобы загрузить страничку и установить это свойство. }</span>
    <span class="keyword">property</span> URL: <span class="keyword">string</span> <span class="directive">read</span> FURL;
    <span class="keyword">procedure</span> Load(<span class="keyword">const</span> AnURL: <span class="keyword">string</span>);
    <span class="keyword">property</span> Color: TColor <span class="directive">read</span> FColor <span class="directive">write</span> SetColor;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TWebPage.Load(<span class="keyword">const</span> AnURL: <span class="keyword">string</span>);
<span class="keyword">begin</span>
  FURL := AnURL;
  NetworkingComponent.LoadWebPage(AnURL);
<span class="keyword">end</span>;

<span class="keyword">function</span> TWebPage.SetColor(<span class="keyword">const</span> Value: TColor);
<span class="keyword">begin</span>
  <span class="keyword">if</span> FColor &lt;&gt; Value <span class="keyword">then</span>
  <span class="keyword">begin</span>
    FColor := Value;
    <span class="comment">// для примера, вызови обноление когда кадый раз меняется значение </span>
    Repaint;
    <span class="comment">// в качестве другого примера, удостоверься что-то подчеркнуто,</span>
    <span class="comment">// как "RenderingComponent" (в любом случае если так),</span>
    <span class="comment">// имеет синхронизированное значения цвета	.</span>
    RenderingComponent.Color := Value;
  <span class="keyword">end</span>;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Когда идет определение свойтсва ты указываешь:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>может ли оно быть прочитано, и как (с помощью прямого чтения поля, или с исползоватием метода "получатель / getter").</p>
</li>
<li>
<p>и, в похожей манере, может ли быть установлено, и как( с помощью прямой записи в созданном поле, или вызовом метода "установщика / setter" ).</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Компилятор прверяет, что типы и параметры и методы объявленных полей соответсвуют типу свойства.
Например, чтобы прочитать свойство <code>Integer</code> ты должен или предоставить поле <code>Integer</code>, или пустой метод, который возвращает<code>Integer</code>.</p>
</div>
<div class="paragraph">
<p>Технически, для компилятора, методы "getter" и "setter"  
просто методы и они могут делать абсолютно все(включая 
побочный эффект и рандомизацию). Но это хорошее соглашение, чтобы созадвать свойства, ведущие себя более менее как поле :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Функция<em> getter / получатель</em> должна не иметь видимые побочные эффекты 
(например, она не должна читать некоторый ввод из файла / клавиатуры). 
Оно должно быть детерминисчтичным(без рандомизации, даже без псевдорандомизации :). 
Чтение свойства много раз должно быть рабочим, и возвращать тоже значение,
если ничего не меняется во время работы.</p>
<div class="paragraph">
<p>Заметь, что нормально для <em>getter</em> иметь некие <em>невидимый</em>
 побочный эффект, например, чтобы спрятать значение некоторого вычисления (известно, что производит одинаковые значения для примера),
 чтобы вернуть его быстрее. По факту это крутая возможность функции "gette.</p>
</div>
</li>
<li>
<p>Функция <em>setter</em> должна всегда устанавливать запрошенное значение, которое вызывает  <em>getter</em>
 ,дает его обратно. Не отвергай неверные значения тихо в "setter" 
(вызови исключение если нужно). Не конвертируй или масштабируй запрашиваемое значение. 
Идея в том, что после <code>MyClass.MyProperty := 123;</code> программист ожидает, что <code>MyClass.MyProperty = 123</code>.</p>
</li>
<li>
<p> <em>read-only / только_чтение свойство</em> часто используют для создания неких полей 
доступных только для чтения снаружи. Снова, хороше соглашение делать их поведение похожим на константу
, по крайней мере так для данного экземпляра, 
по крайней мере для этого экземпляра объекта с этой структурой. 
Значение свойства не должно меняться внезапно. Делай функцию, а не свойство,
 если читая ее получается побочный эффект или возвращается что-то случайное.</p>
</li>
<li>
<p><em>"возвращающие" поля свойства почти всегда приватны</em>, поскольку идея свойства - это инкапсулирование всего внешнего доступа к нему.</p>
</li>
<li>
<p>Возможно сделать <em>только устанавливающиеся свойства</em>, но я никогда еще не видал хороший пример реализации:)</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">ПРИМЕЧАНИЕ</div>
</td>
<td class="content">
Свойства так же могут быть определены извне класса, на уровне юнита. Они служат аналогичной цели: как глобальные переменные,
но возвращаемые подпрограммами <em>getter</em> и<em>setter</em>.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_exceptions">4.4. Исключения</h3>
<div class="paragraph">
<p>У нас есть исключения.Они могут быть пойманы с помощью условий <code>try …​ except …​ end</code>, и мы имеем заключительную секцию как <code>try …​ finally …​ end</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>

<span class="keyword">program</span> MyProgram;

<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
    <span class="keyword">procedure</span> MyMethod;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.MyMethod;
<span class="keyword">begin</span>
  <span class="keyword">if</span> Random &gt; <span class="float">0.5</span> <span class="keyword">then</span>
    <span class="keyword">raise</span> Exception.Create(<span class="string"><span class="delimiter">'</span><span class="content">Raising an exception!</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>;

<span class="keyword">var</span>
  C: TMyClass;
<span class="keyword">begin</span>
  C := TMyClass.Create;
  <span class="keyword">try</span>
    C.MyMethod;
  <span class="keyword">finally</span> FreeAndNil(C) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Заметь, что условие <code>finally</code> выполниется даже если ты выходишь из блока, используя <code>Exit</code> (из функции / процедуры / метода) или <code>Break</code> или <code>Continue</code> (из тела цикла).</p>
</div>
</div>
<div class="sect2">
<h3 id="_visibility_specifiers">4.5. Видимость спецификаторов</h3>
<div class="paragraph">
<p>Как и в большинстве объектно-ориентированных языках, мы имеем визуальные спецификаторы, чтобы скрывать области / методы / свойства.</p>
</div>
<div class="paragraph">
<p>Базовые уровни видимости :</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>public</code></dt>
<dd>
<p>каждый имеет доступ, включая код в других юнитах.</p>
</dd>
<dt class="hdlist1"><code>private</code></dt>
<dd>
<p>доступен только только в этом классе.</p>
</dd>
<dt class="hdlist1"><code>protected</code></dt>
<dd>
<p>доступен только в этом классе и потомках.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>Объяснение <code>private</code> и <code>protected</code> видимостей выше не полностью верно. The code <em>в других юнитах</em> может преодолевать свои границы, и доступ к <code>private</code> и <code>protected</code>  свободен. Иногда это прекрасная фишка, позволяющая реализовывать плотно-связанные классы. Используй <code>strict private</code> или <code>strict protected</code>, чтобы защищить свои классы более плотно. Смотри раздел <a href="#_private_and_strict_private">приватные и строго приватные</a>.</p>
</div>
<div class="paragraph">
<p>По дефолту, если ты не укажешь видимость ,тогда видимость будет  <code>public</code> у продекларированного. Исключение только у классов скомпилированных с  <code>{$M+}</code>, или у потомков классов скомпилированных с <code>{$M+}</code>,которые включают всех предков <code>TPersistent</code>, которые также включают всех предков <code>TComponent</code> (с предков <code>TComponent</code>  из <code>TPersistent</code>). Для них дефолтное значение видимости <code>published</code>, которое такое же как <code>public</code>, но в дополененине потоковая система знает как работать с ним.</p>
</div>
<div class="paragraph">
<p>Но не каждой области или свойству типа позволено быть в секции <code>published</code> ( не каждый тип может быть в потоке, и только классы могут быть в потоке из простых полей). Просто используй <code>public</code> если ты не волнуешься о потоке, но хочешь, чтобы что-нибудь было доступно всем пользователям.</p>
</div>
</div>
<div class="sect2">
<h3 id="_default_ancestor">4.6. Стандартные предки</h3>
<div class="paragraph">
<p>Если ты не указываешь тип предка, каждый <code>class</code> унаследует <code>TObject</code>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_freeing_classes">5. Освобождение классов</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_remember_to_free_the_class_instances">5.1. Помни освободить экзэмпляры класса</h3>
<div class="paragraph">
<p>Экзэмпляры класса должны быть вручную освобождены, иначе ты получишь утечку информации. Я советую использовать FPC <code>-gl -gh</code> опции, чтобы определить утечки памяти (смотри <a href="http://castle-engine.sourceforge.net/tutorial_optimization.php#section_memory" class="bare">http://castle-engine.sourceforge.net/tutorial_optimization.php#section_memory</a> ).</p>
</div>
<div class="paragraph">
<p>Запомни, что это не касается поднятых исключений/raised exceptions. Хотя ты можешь создать клас когда появляется исключени
( и это вполне нормлаьный класс,
, и ты можешь создать свой собственный класс для этой цели тоже). Но  
этот экзэмпляр класса освобождается автоматически.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_free">5.2. Как освободить</h3>
<div class="paragraph">
<p>Чтобы освободить экзэмпляр класса, лучше вызвать <code>FreeAndNil(A)</code> в своем экзэмпляре класса. Оно проверит если <code>A</code> равно <code>nil</code>, если нет — то это деструктор , и установит <code>A</code> в <code>nil</code>. Такой вызов не приведет к ошибке при множественном использовании в одной строке.</p>
</div>
<div class="paragraph">
<p>Это более или менее кратчайший путь для </p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">if</span> A &lt;&gt; <span class="keyword">nil</span> <span class="keyword">then</span>
<span class="keyword">begin</span>
  A.Destroy;
  A := <span class="keyword">nil</span>;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>В действительности,это упрощение, так <code>FreeAndNil</code> делает полезный трюк и присваивает переменной <code>A</code> значение <code>nil</code> <strong>до</strong> вызова деструктора по ссылке.</p>
</div>
<div class="paragraph">
<p>Часто в ином коде вы можете также найти людей испоьзующих <code>A.Free</code> метод, делающий тоже</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">if</span> A &lt;&gt; <span class="keyword">nil</span> <span class="keyword">then</span>
  A.Destroy;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Заметь, что в обычных обстоятельствах,ты никогда не должен вызывать метод в случае, когда он может быть <code>nil</code>. Метод <code>Free</code> здесь исключение (оно делает что-то грязное в реализации — а именно, проверяет <code>Self &lt;&gt; nil</code>).</p>
</div>
<div class="paragraph">
<p>Я советую всегда использовать<code>FreeAndNil(A)</code> , без иключений, и никогда не вызываеть метод <code>Free</code> или диструктор <code>Destroy</code>. <em>Castle Game Engine</em> делает тоже. Он предоставляет красиваое утверждение, что все ссылки равны  nil, или указывают действующий экзэмпляр</em>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_manual_and_automatic_freeing">5.3. Ручное и автоматическое освобождение</h3>
<div class="paragraph">
<p>В многих ситуациях нужда освободить экземпляр не большая проблема.
Ты просто пишешь деструктор, которых соответствует конструктору, и освобождает все,что   
было размещено в конструкторе(или, более полно, во всех жизненном цикле класса). Будь внимателен и освобди каждый экзэмпляр<strong> один раз </strong>. Обычно, это хорошая идея, чтобы установиь <code>nil</code> на освободившуюся ссылку, но обычно более удобно использовать <code>FreeAndNil(A)</code>.</p>
</div>
<div class="paragraph">
<p>Так как здесь:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TGun = <span class="keyword">class</span>
  <span class="keyword">end</span>;

  TPlayer = <span class="keyword">class</span>
    Gun1, Gun2: TGun;
    <span class="keyword">constructor</span> Create;
    <span class="keyword">destructor</span> Destroy; <span class="directive">override</span>;
  <span class="keyword">end</span>;

<span class="keyword">constructor</span> TPlayer.Create;
<span class="keyword">begin</span>
  <span class="keyword">inherited</span>;
  Gun1 := TGun.Create;
  Gun2 := TGun.Create;
<span class="keyword">end</span>;

<span class="keyword">destructor</span> TPlayer.Destroy;
<span class="keyword">begin</span>
  FreeAndNil(Gun1);
  FreeAndNil(Gun2);
  <span class="keyword">inherited</span>;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Чтобы избежать нужды явно освобождать экземпляр, ты можешь раз использовать особенность <code>TComponent</code> - <em>"собственность"</em>.
 Объект, который является собственностью будет автоматически освобожден владельцем. 
Это автоматическая забо о том, чтобы не освожодать уже свободный экземпляр в данном случае
 (это будет работать если ты освободил принадлежащий вручную ранее). Ты можешь изменить предыдущий пример на :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">uses</span> SysUtils, Classes;

<span class="keyword">type</span>
  TGun = <span class="keyword">class</span>(TComponent)
  <span class="keyword">end</span>;

  TPlayer = <span class="keyword">class</span>(TComponent)
    Gun1, Gun2: TGun;
    <span class="keyword">constructor</span> Create(AOwner: TComponent); <span class="directive">override</span>;
  <span class="keyword">end</span>;

<span class="keyword">constructor</span> TPlayer.Create(AOwner: TComponent);
<span class="keyword">begin</span>
  <span class="keyword">inherited</span>;
  Gun1 := TGun.Create(Self);
  Gun2 := TGun.Create(Self);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Заметь, что нам нужно отменить вуртуальный конструктор <code>TComponent</code> здесь. Поэтому мы не можем изменить параметры конструктора. (Действительно, ты можешь — продекларировать новый контруктор -  <code>перезаписать/перегрузить</code>.
 Но буть внимателен, как функциональность,напрмер стриминг,мы до сих пор будем исплоьзовать виртуальный конструктор, будь уверен это будет работать везде.)</p>
</div>
<div class="paragraph">
<p>Another approach to automatic freeing is use the <code>OwnsObjects</code> functionality (by default already <code>true</code>!) of list-classes like <code>TFPGObjectList</code> or <code>TObjectList</code>. So we could also write:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">uses</span> SysUtils, Classes, FGL;

<span class="keyword">type</span>
  TGun = <span class="keyword">class</span>
  <span class="keyword">end</span>;

  TGunList = specialize TFPGObjectList&lt;TGun&gt;;

  TPlayer = <span class="keyword">class</span>
    Guns: TGunList;
    Gun1, Gun2: TGun;
    <span class="keyword">constructor</span> Create;
    <span class="keyword">destructor</span> Destroy; <span class="directive">override</span>;
  <span class="keyword">end</span>;

<span class="keyword">constructor</span> TPlayer.Create;
<span class="keyword">begin</span>
  <span class="keyword">inherited</span>;
  <span class="comment">// Actually, the parameter true (OwnsObjects) is already the default</span>
  Guns := TGunList.Create(true);
  Gun1 := TGun.Create(Self);
  Guns.Add(Gun1);
  Gun2 := TGun.Create(Self);
  Guns.Add(Gun2);
<span class="keyword">end</span>;

<span class="keyword">destructor</span> TPlayer.Destroy;
<span class="keyword">begin</span>
  <span class="comment">{ We have to take care to free the list.
    It will automatically free it's contents. }</span>
  FreeAndNil(Guns);

  <span class="comment">{ No need to free the Gun1, Gun2 anymore. It's a nice habit to set to "nil"
    their references now, as we know they are freed. In this simple class,
    with so simple destructor, it's obvious that they cannot be accessed
    anymore -- but doing this pays off in case of larger and more complicated
    destructors.

    Alternatively, we could avoid declaring Gun1 and Gun2,
    and instead use Guns[0] and Guns[1] in own code.
    Or create a function like Gun1 that returns Guns[0]. }</span>
  Gun1 := <span class="keyword">nil</span>;
  Gun2 := <span class="keyword">nil</span>;
  <span class="keyword">inherited</span>;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Beware that the list classes "ownership" mechanism is simple, and you
 will get an error if you free the instance using some other means. Use <code>Extract</code> method to remove something from a list without freeing it, thus taking the responsibility to free it yourself.</p>
</div>
<div class="paragraph">
<p><strong>In the Castle Game Engine</strong>: The descendants of <code>TX3DNode</code> have automatic memory management when inserted as children of another <code>TX3DNode</code>. The root X3D node, <code>TX3DRootNode</code>, is in turn usually owned by <code>TCastleSceneCore</code>. Some other things also have a simple ownership mechanism — look for parameters and properties called <code>OwnsXxx</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_free_notification">5.4. Free notification</h3>
<div class="paragraph">
<p>If you copy a reference to the instance, such that you have two 
references to the same memory, and then one of them is freed — the other
 one becomes a <em>"dangling pointer"</em>. It should not be accessed, 
as it points to a memory that is no longer allocated. Accessing it may 
result in a runtime error, or garbage being returned (as the memory may 
be reused for other stuff in your program).</p>
</div>
<div class="paragraph">
<p>Using the <code>FreeAndNil</code> to free the instance doesn’t help here. <code>FreeAndNil</code> sets to <code>nil</code> only the reference it got — there’s no way for it to set all other references.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">var</span>
  O1, O2: TObject;
<span class="keyword">begin</span>
  O1 := TObject.Create;
  O2 := O1;
  FreeAndNil(O1);

  <span class="comment">{ Now O1 is nil. If some code may access it, it can use
    "if O1 &lt;&gt; nil ..." to avoid calling methods on a freed instance,
    like

      if O1 &lt;&gt; nil then Writeln(O1.ClassName);

    Trying to access a field of a nil instance (or call a method
    that accessed a field of a nil instance) results in a predictable
    exception at runtime. }</span>

  <span class="comment">{ With O2, things are more difficult. It's not nil, but it's invalid.
    Trying to access a field of a nil instance (or call a method
    that accessed a field of a nil instance) results in an unpredictable
    behavior - maybe an access violation exception, maybe a garbage data
    returned. }</span>
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>There are various solutions to it:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>One solution is to, well, be careful. Don’t assume anything about the
 lifetime of the reference, if it’s created by other code. If a class <code>TCar</code> has a field pointing to some instance of <code>TWheel</code>, it’s a <em>convention</em> that the reference to <em>wheel</em> is valid as long as the reference to <em>car</em> exists, and the <em>car</em> will free it’s <em>wheels</em>
 inside it’s destructor. But that’s just a convention, the documentation
 should mention if there’s something more complicated going on.</p>
</li>
<li>
<p>The other solution is to use <code>TComponent</code> class "free 
notification" mechanism. One component can be notified when another 
component is freed, and thus set it’s reference to <code>nil</code>.</p>
<div class="paragraph">
<p>Thus you get something like a <em>weak reference</em>. It can cope 
with various usage scenarios, for example you can let the code from 
outside of the class to set your reference, and the outside code can 
also free the instance at anytime.</p>
</div>
<div class="paragraph">
<p>This requires both classes to descend from <code>TComponent</code>. Using it in general boils down to calling <code>FreeNotification</code> , <code>RemoveFreeNotification</code>, and overriding <code>Notification</code>.</p>
</div>
<div class="paragraph">
<p>Here’s a complete example, showing how to use this mechanism, 
together with constructor / destructor and a setter property. Sometimes 
it can be done simpler, but this is the full-blown version that is 
always correct:)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TControl = <span class="keyword">class</span>(TComponent)
  <span class="keyword">end</span>;

  TContainer = <span class="keyword">class</span>(TComponent)
  <span class="directive">private</span>
    FSomeSpecialControl: TControl;
    <span class="keyword">procedure</span> SetSomeSpecialControl(<span class="keyword">const</span> Value: TControl);
  <span class="directive">protected</span>
    <span class="keyword">procedure</span> Notification(AComponent: TComponent; Operation: TOperation); <span class="directive">override</span>;
  <span class="directive">public</span>
    <span class="keyword">destructor</span> Destroy; <span class="directive">override</span>;
    <span class="keyword">property</span> SomeSpecialControl: TControl
      <span class="directive">read</span> FSomeSpecialControl <span class="directive">write</span> SetSomeSpecialControl;
  <span class="keyword">end</span>;

<span class="keyword">implementation</span>

<span class="keyword">procedure</span> TContainer.Notification(AComponent: TComponent; Operation: TOperation);
<span class="keyword">begin</span>
  <span class="keyword">inherited</span>;
  <span class="keyword">if</span> (Operation = opRemove) <span class="keyword">and</span> (AComponent = FSomeSpecialControl) <span class="keyword">then</span>
    <span class="comment">{ set to nil by SetSomeSpecialControl to clean nicely }</span>
    SomeSpecialControl := <span class="keyword">nil</span>;
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TContainer.SetSomeSpecialControl(<span class="keyword">const</span> Value: TControl);
<span class="keyword">begin</span>
  <span class="keyword">if</span> FSomeSpecialControl &lt;&gt; Value <span class="keyword">then</span>
  <span class="keyword">begin</span>
    <span class="keyword">if</span> FSomeSpecialControl &lt;&gt; <span class="keyword">nil</span> <span class="keyword">then</span>
      FSomeSpecialControl.RemoveFreeNotification(Self);
    FSomeSpecialControl := Value;
    <span class="keyword">if</span> FSomeSpecialControl &lt;&gt; <span class="keyword">nil</span> <span class="keyword">then</span>
      FSomeSpecialControl.FreeNotification(Self);
  <span class="keyword">end</span>;
<span class="keyword">end</span>;

<span class="keyword">destructor</span> TContainer.Destroy;
<span class="keyword">begin</span>
  <span class="comment">{ set to nil by SetSomeSpecialControl, to detach free notification }</span>
  SomeSpecialControl := <span class="keyword">nil</span>;
  <span class="keyword">inherited</span>;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_run_time_library">6. Run-time library</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_input_output_using_streams">6.1. Input/output using streams</h3>
<div class="paragraph">
<p>Modern programs should use <code>TStream</code> class and it’s many descendants to do input / output.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">var</span>
  S: TStream;
  A: Integer;
<span class="keyword">begin</span>
  S := TFileStream.Create(<span class="string"><span class="delimiter">'</span><span class="content">my_binary_file.data</span><span class="delimiter">'</span></span>);
  <span class="keyword">try</span>
    S.ReadBuffer(A, SizeOf(A));
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Got integer </span><span class="delimiter">'</span></span>, A);
  <span class="keyword">finally</span> FreeAndNil(S) <span class="keyword">end</span>;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>It has many useful descendants, like <code>TFileStream</code>, <code>TMemoryStream</code>, <code>TStringStream</code>.</p>
</div>
<div class="paragraph">
<p><strong>In the Castle Game Engine</strong>: You should use the <code>Download</code>
 method to create a stream that operates of resources (which includes 
files, data downloaded from URLs and Android assets). Moreover, to open 
the resource inside your game data (typically in <code>data</code> subdirectory) use the <code>ApplicationData</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">EnableNetwork := true;
S := Download(<span class="string"><span class="delimiter">'</span><span class="content">http://castle-engine.sourceforge.net</span><span class="delimiter">'</span></span>);</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">S := Download(<span class="string"><span class="delimiter">'</span><span class="content">file:///home/michalis/my_binary_file.data</span><span class="delimiter">'</span></span>);</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">S := Download(ApplicationData(<span class="string"><span class="delimiter">'</span><span class="content">gui/my_image.png</span><span class="delimiter">'</span></span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>To read text files, I advice using <code>TTextReader</code> class from <code>CastleClassUtils</code>. It provides a line-oriented API, and wraps a <code>TStream</code> inside. The <code>TTextReader</code> constructor can take a ready URL, or you can pass there your custom <code>TStream</code> source.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">Text := TTextReader.Create(ApplicationData(<span class="string"><span class="delimiter">'</span><span class="content">my_data.txt</span><span class="delimiter">'</span></span>));
<span class="keyword">while</span> <span class="keyword">not</span> Text.Eof <span class="keyword">do</span>
  WritelnLog(<span class="string"><span class="delimiter">'</span><span class="content">NextLine</span><span class="delimiter">'</span></span>, Text.ReadLine);</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_lists">6.2. Lists</h3>
<div class="paragraph">
<p>For dynamic-length lists of stuff, I advice using generic classes from the <code>FGL</code> unit. Use <code>TFPGList</code> for lists of primitives (or records or old-style objects), <code>TFPGObjectList</code> for a list of class instances. <strong>In the Castle Game Engine:</strong> You can also use <code>CastleGenericLists</code> with <code>TGenericStructList</code>
 for a list of records or old-style objects, this workarounds the 
problem of impossibility to override their operators in earlier FPC 
versions.</p>
</div>
<div class="paragraph">
<p>Using these lists is a good idea, as you get type-safety, and their 
API is rich (there are methods to find, sort, iterate and so on). We 
discourage using <em>dynamic arrays</em> (<code>array of X</code>, <code>SetLength(X, …​)</code>) as their API is poor (you can only use <code>SetLength</code> and your own type helpers). We discourage using <code>TList</code> or <code>TObjectList</code> as it will require casting your references from <code>TObject</code> to your type.</p>
</div>
</div>
<div class="sect2">
<h3 id="_cloning_tpersistent_assign">6.3. Cloning: TPersistent.Assign</h3>
<div class="paragraph">
<p>To allow copying a class instance, the standard approach is to derive your class from <code>TPersistent</code>, and override it’s <code>Assign</code> method. There is no magic copying here, you need to implement the <code>Assign</code> to actually copy the fields you want.</p>
</div>
<div class="paragraph">
<p>You should carefully implement the <code>Assign</code> method, to copy from a class that may be a descendant of the current class.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils, Classes;

<span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>(TPersistent)
  <span class="directive">public</span>
    MyInt: Integer;
    <span class="keyword">procedure</span> Assign(Source: TPersistent); <span class="directive">override</span>;
  <span class="keyword">end</span>;

  TMyClassDescendant = <span class="keyword">class</span>(TMyClass)
  <span class="directive">public</span>
    MyString: <span class="keyword">string</span>;
    <span class="keyword">procedure</span> Assign(Source: TPersistent); <span class="directive">override</span>;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.Assign(Source: TPersistent);
<span class="keyword">var</span>
  SourceMyClass: TMyClass;
<span class="keyword">begin</span>
  <span class="keyword">if</span> Source <span class="keyword">is</span> TMyClass <span class="keyword">then</span>
  <span class="keyword">begin</span>
    SourceMyClass := TMyClass(Source);
    MyInt := SourceMyClass.MyInt;
    <span class="comment">// Xxx := SourceMyClass.Xxx; // add new fields here</span>
  <span class="keyword">end</span> <span class="keyword">else</span>
    <span class="comment">{ call inherited ONLY when you cannot handle Source class }</span>
    <span class="keyword">inherited</span> Assign(Source);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClassDescendant.Assign(Source: TPersistent);
<span class="keyword">var</span>
  SourceMyClassDescendant: TMyClassDescendant;
<span class="keyword">begin</span>
  <span class="keyword">if</span> Source <span class="keyword">is</span> TMyClassDescendant <span class="keyword">then</span>
  <span class="keyword">begin</span>
    SourceMyClassDescendant := TMyClassDescendant(Source);
    MyString := SourceMyClassDescendant.MyString;
    <span class="comment">// Xxx := SourceMyClassDescendant.Xxx; // add new fields here</span>
  <span class="keyword">end</span>;

  <span class="comment">{ call inherited ALWAYS, to allow TMyClass.Assign to handle
    remaining fields. }</span>
  <span class="keyword">inherited</span> Assign(Source);
<span class="keyword">end</span>;

<span class="keyword">var</span>
  C1, C2: TMyClass;
  CD1, CD2: TMyClassDescendant;
<span class="keyword">begin</span>
  <span class="comment">// test TMyClass.Assign</span>
  C1 := TMyClass.Create;
  C2 := TMyClass.Create;
  <span class="keyword">try</span>
    C1.MyInt := <span class="integer">666</span>;
    C2.Assign(C1);
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">C2 state: </span><span class="delimiter">'</span></span>, C2.MyInt);
  <span class="keyword">finally</span>
    FreeAndNil(C1);
    FreeAndNil(C2);
  <span class="keyword">end</span>;

  <span class="comment">// test TMyClassDescendant.Assign</span>
  CD1 := TMyClassDescendant.Create;
  CD2 := TMyClassDescendant.Create;
  <span class="keyword">try</span>
    CD1.MyInt := <span class="integer">44</span>;
    CD1.MyString := <span class="string"><span class="delimiter">'</span><span class="content">blah</span><span class="delimiter">'</span></span>;
    CD2.Assign(CD1);
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">CD2 state: </span><span class="delimiter">'</span></span>, CD2.MyInt, <span class="char"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>, CD2.MyString);
  <span class="keyword">finally</span>
    FreeAndNil(CD1);
    FreeAndNil(CD2);
  <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Sometimes it’s more comfortable to alternatively override the <code>AssignTo</code> method in the source class, instead of overriding the <code>Assign</code> method in the target class.</p>
</div>
<div class="paragraph">
<p>Be careful when calling <code>inherited</code> in the <code>Assign</code> implementation. You should <em>call inherited <code>TPersistent.Assign</code> only if you cannot handle the assignment in your code</em> (this allows the <code>AssignTo</code>
 method to work, or otherwise raise an exception when assignment cannot 
be done). On the other hand, if your class descends from another class 
that already implements the <code>Assign</code> method, then <em>always call the inherited <code>TMyClass.Assign</code></em>. See the example below.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Remember that when descending from <code>TPersistent</code>, the default <em>visibility specifier</em> is <code>published</code>, to allow streaming of <code>TPersistent</code> descendants. Not all field and property types are allowed in the <code>published</code> section. If you get errors related to it, and you don’t care about streaming, just change the visibility to <code>public</code>. See the <a href="#_visibility_specifiers">Visibility specifiers</a> section.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_various_language_features">7. Various language features</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_local_nested_routines">7.1. Local (nested) routines</h3>
<div class="paragraph">
<p>Inside a larger <em>routine</em> (function, procedure, method) you can define a helper routine.</p>
</div>
<div class="paragraph">
<p>The local routine can freely access (read and write) all the parameters of a parent, <em>and all the local variables of the parent that were declared above it</em>.
 This is very powerful. It often allows to split long routines into a 
couple of small ones without much effort (as you don’t have to pass 
around all the necessary information in the parameters). Be careful to 
not overuse this feature — if many nested functions use (and even 
change) the same variable of the parent, the code may get hard to 
follow.</p>
</div>
<div class="paragraph">
<p>These two examples are equivalent:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">procedure</span> SumOfSquares(<span class="keyword">const</span> N: Integer): Integer;

  <span class="keyword">function</span> Square(<span class="keyword">const</span> Value: Integer): Integer;
  <span class="keyword">begin</span>
    Result := Value * Value;
  <span class="keyword">end</span>;

<span class="keyword">var</span>
  I: Integer;
<span class="keyword">begin</span>
  Result := <span class="integer">0</span>;
  <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> N <span class="keyword">do</span>
    Result := Result + Square(I);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Another version, where we let the local routine <code>Square</code> to access <code>I</code> directly:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">procedure</span> SumOfSquares(<span class="keyword">const</span> N: Integer): Integer;
<span class="keyword">var</span>
  I: Integer;

  <span class="keyword">function</span> Square: Integer;
  <span class="keyword">begin</span>
    Result := I * I;
  <span class="keyword">end</span>;

<span class="keyword">begin</span>
  Result := <span class="integer">0</span>;
  <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> N <span class="keyword">do</span>
    Result := Result + Square;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Local routines can go to any depth — which means that you can define a
 local routine within another local routine. So you can go wild (but 
please don’t go <em>too wild</em>, or the code will get unreadable:).</p>
</div>
</div>
<div class="sect2">
<h3 id="Callbacks">7.2. Callbacks (aka events, aka pointers to functions, aka procedural variables)</h3>
<div class="paragraph">
<p>They allow to call a function indirectly, through to a variable. The 
variable can be assigned at runtime to point to any function <em>with matching parameter types and return types</em>.</p>
</div>
<div class="paragraph">
<p>The callback can be:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Normal, which means it can point to any normal routine (not a method, not local).</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>

<span class="keyword">function</span> Add(<span class="keyword">const</span> A, B: Integer): Integer;
<span class="keyword">begin</span>
  Result := A + B;
<span class="keyword">end</span>;

<span class="keyword">function</span> Multiply(<span class="keyword">const</span> A, B: Integer): Integer;
<span class="keyword">begin</span>
  Result := A * B;
<span class="keyword">end</span>;

<span class="keyword">type</span>
  TMyFunction = <span class="keyword">function</span> (<span class="keyword">const</span> A, B: Integer): Integer;

<span class="keyword">function</span> ProcessTheList(<span class="keyword">const</span> F: TMyFunction): Integer;
<span class="keyword">var</span>
  I: Integer;
<span class="keyword">begin</span>
  Result := <span class="integer">1</span>;
  <span class="keyword">for</span> I := <span class="integer">2</span> <span class="keyword">to</span> <span class="integer">10</span> <span class="keyword">do</span>
    Result := F(Result, I);
<span class="keyword">end</span>;

<span class="keyword">var</span>
  SomeFunction: TMyFunction;
<span class="keyword">begin</span>
  SomeFunction := @Add;
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">1 + 2 + 3 ... + 10 = </span><span class="delimiter">'</span></span>, ProcessTheList(SomeFunction));

  SomeFunction := @Multiply;
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">1 * 2 * 3 ... * 10 = </span><span class="delimiter">'</span></span>, ProcessTheList(SomeFunction));
<span class="keyword">end</span>.</code></pre>
</div>
</div>
</li>
<li>
<p>A method: declare with <code>of object</code> at the end.</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TMyMethod = <span class="keyword">procedure</span> (<span class="keyword">const</span> A: Integer) <span class="keyword">of</span> <span class="keyword">object</span>;

  TMyClass = <span class="keyword">class</span>
    CurrentValue: Integer;
    <span class="keyword">procedure</span> Add(<span class="keyword">const</span> A: Integer);
    <span class="keyword">procedure</span> Multiply(<span class="keyword">const</span> A: Integer);
    <span class="keyword">procedure</span> ProcessTheList(<span class="keyword">const</span> M: TMyMethod);
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.Add(<span class="keyword">const</span> A: Integer);
<span class="keyword">begin</span>
  CurrentValue := CurrentValue + A;
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.Multiply(<span class="keyword">const</span> A: Integer);
<span class="keyword">begin</span>
  CurrentValue := CurrentValue * A;
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass.ProcessTheList(<span class="keyword">const</span> M: TMyMethod);
<span class="keyword">var</span>
  I: Integer;
<span class="keyword">begin</span>
  CurrentValue := <span class="integer">1</span>;
  <span class="keyword">for</span> I := <span class="integer">2</span> <span class="keyword">to</span> <span class="integer">10</span> <span class="keyword">do</span>
    M(I);
<span class="keyword">end</span>;

<span class="keyword">var</span>
  C: TMyClass;
<span class="keyword">begin</span>
  C := TMyClass.Create;
  <span class="keyword">try</span>
    C.CurrentValue := <span class="integer">1</span>;
    C.ProcessTheList(@C.Add);
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">1 + 2 + 3 ... + 10 = </span><span class="delimiter">'</span></span>, C.CurrentValue);

    C.CurrentValue := <span class="integer">1</span>;
    C.ProcessTheList(@C.Multiply);
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">1 * 2 * 3 ... * 10 = </span><span class="delimiter">'</span></span>, C.CurrentValue);
  <span class="keyword">finally</span> FreeAndNil(C) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that you <em>cannot</em> pass global procedures / functions as methods. They are incompatible. If you have to provide an <code>of object</code> callback, but don’t want to create a dummy class instance, you can pass <a href="#_class_methods">Class methods</a> as methods.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMyMethod = <span class="keyword">function</span> (<span class="keyword">const</span> A, B: Integer): Integer <span class="keyword">of</span> <span class="keyword">object</span>;

  TMyClass = <span class="keyword">class</span>
    <span class="keyword">class</span> <span class="keyword">function</span> Add(<span class="keyword">const</span> A, B: Integer): Integer
    <span class="keyword">class</span> <span class="keyword">function</span> Multiply(<span class="keyword">const</span> A, B: Integer): Integer
  <span class="keyword">end</span>;

<span class="keyword">var</span>
  M: TMyMethod;
<span class="keyword">begin</span>
  M := @TMyClass(<span class="keyword">nil</span>).Add;
  M := @TMyClass(<span class="keyword">nil</span>).Multiply;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Unfortunately, you need to write ugly <code>@TMyClass(nil).Add</code> instead of just <code>@TMyClass.Add</code>.</p>
</div>
</li>
<li>
<p>A (possibly) local routine: declare with <code>is nested</code> at the end, and make sure to use <code>{$modeswitch nestedprocvars}</code> directive for the code. These go hand-in-hand with <a href="#_local_nested_routines">Local (nested) routines</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_generics">7.3. Generics</h3>
<div class="paragraph">
<p>A powerful feature of any modern language. The definition of 
something (typically, of a class) can be parameterized with another 
type. The most typical example is when you need to create a container (a
 list, dictionary, tree, graph…​): you can define <em>a list of type T</em>, and then <em>specialize</em> it to instantly get <em>a list of integers</em>, <em>a list of strings</em>, <em>a list of TMyRecord</em>, and so on.</p>
</div>
<div class="paragraph">
<p>The generics in Pascal are realized much like generics in C++. Which 
means that they are "expanded" at the specialization time, a <em>little</em>
 like macros (but when expanding, the identifiers from the generic 
definition are used, so you cannot "inject" any unexpected behavior into
 a generic when specializing it). In effect this means that they are 
very fast (can be optimized for each particular type)  and work with 
types of any size. You can use a primitive type (integer, float) as well
 as a record as well as a class when specializing a generic.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  generic TMyCalculator&lt;T&gt; = <span class="keyword">class</span>
    Value: T;
    <span class="keyword">procedure</span> Add(<span class="keyword">const</span> A: T);
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyCalculator.Add(<span class="keyword">const</span> A: T);
<span class="keyword">begin</span>
  Value := Value + A;
<span class="keyword">end</span>;

<span class="keyword">type</span>
  TMyFloatCalculator = specialize TMyCalculator&lt;Single&gt;;
  TMyStringCalculator = specialize TMyCalculator&lt;<span class="keyword">string</span>&gt;;

<span class="keyword">var</span>
  FloatCalc: TMyFloatCalculator;
  StringCalc: TMyStringCalculator;
<span class="keyword">begin</span>
  FloatCalc := TMyFloatCalculator.Create;
  <span class="keyword">try</span>
    FloatCalc.Add(<span class="float">3.14</span>);
    FloatCalc.Add(<span class="integer">1</span>);
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">FloatCalc: </span><span class="delimiter">'</span></span>, FloatCalc.Value:<span class="integer">1</span>:<span class="integer">2</span>);
  <span class="keyword">finally</span> FreeAndNil(FloatCalc) <span class="keyword">end</span>;

  StringCalc := TMyStringCalculator.Create;
  <span class="keyword">try</span>
    StringCalc.Add(<span class="string"><span class="delimiter">'</span><span class="content">something</span><span class="delimiter">'</span></span>);
    StringCalc.Add(<span class="string"><span class="delimiter">'</span><span class="content"> more</span><span class="delimiter">'</span></span>);
    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">StringCalc: </span><span class="delimiter">'</span></span>, StringCalc.Value);
  <span class="keyword">finally</span> FreeAndNil(StringCalc) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Generics are not limited to classes, you can have generic functions and procedures as well:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils;

generic <span class="keyword">function</span> Min&lt;T&gt;(<span class="keyword">const</span> A, B: T): T;
<span class="keyword">begin</span>
  <span class="keyword">if</span> A &lt; B <span class="keyword">then</span>
    Result := A <span class="keyword">else</span>
    Result := B;
<span class="keyword">end</span>;

<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Min (1, 0): </span><span class="delimiter">'</span></span>, specialize Min&lt;Integer&gt;(<span class="integer">1</span>, <span class="integer">0</span>));
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Min (3.14, 5): </span><span class="delimiter">'</span></span>, specialize Min&lt;Single&gt;(<span class="float">3.14</span>, <span class="integer">5</span>):<span class="integer">1</span>:<span class="integer">2</span>);
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Min (</span><span class="char">''</span><span class="content">a</span><span class="char">''</span><span class="content">, </span><span class="char">''</span><span class="content">b</span><span class="char">''</span><span class="content">): </span><span class="delimiter">'</span></span>, specialize Min&lt;<span class="keyword">string</span>&gt;(<span class="char"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>, <span class="char"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>));
<span class="keyword">end</span>.</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_overloading">7.4. Overloading</h3>
<div class="paragraph">
<p>Methods (and global functions and procedures) with the same name are 
allowed, as long as they have different parameters. At compile time, the
 compiler detects which one you want to use, knowing the parameters you 
pass.</p>
</div>
<div class="paragraph">
<p>By default, the overloading uses the FPC approach, which means that 
all the methods in given namespace (a class or a unit) are equal, and 
hide the other methods in namespaces with less priority. For example, if
 you define a class with methods <code>Foo(Integer)</code> and <code>Foo(string)</code>, and it descends from a class with method <code>Foo(Float)</code>, then the users of your new class will not be able to access the method <code>Foo(Float)</code> easily (they still can --- if they typecast the class to it’s ancestor type). To overcome this, use the <code>overload</code> keyword.</p>
</div>
</div>
<div class="sect2">
<h3 id="_preprocessor">7.5. Preprocessor</h3>
<div class="paragraph">
<p>You can use simple preprocessor directives for</p>
</div>
<div class="ulist">
<ul>
<li>
<p>conditional compilation (code depending on platform, or some custom switches),</p>
</li>
<li>
<p>to include one file in another,</p>
</li>
<li>
<p>you can also use parameter-less macros.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Note that macros with parameters are not allowed. In general, you 
should avoid using the preprocessor stuff…​ unless it’s really 
justified. The preprocessing happens before parsing, which means that 
you can "break" the normal syntax of the Pascal language. This is a 
powerful, but also somewhat dirty, feature.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">unit</span> PreprocessorStuff;
<span class="keyword">interface</span>

<span class="preprocessor">{$ifdef FPC}</span>
<span class="comment">{ This is only defined when compiled by FPC, not other compilers (like Delphi). }</span>
<span class="keyword">procedure</span> Foo;
<span class="preprocessor">{$endif}</span>

<span class="comment">{ Define a NewLine constant. Here you can see how the normal syntax of Pascal
  is "broken" by preprocessor directives. When you compile on Unix
  (includes Linux, Android, Mac OS X), the compiler sees this:

    const NewLine = #10;

  When you compile on Windows, the compiler sees this:

    const NewLine = #13#10;

  On other operating systems, the code will fail to compile,
  because a compiler sees this:

    const NewLine = ;

  It's a *good* thing that the compilation fails in this case -- if you
  will have to port the program to an OS that is not Unix, not Windows,
  you will be reminded by a compiler to choose the newline convention
  on that system. }</span>

<span class="keyword">const</span>
  NewLine =
    <span class="preprocessor">{$ifdef UNIX}</span> <span class="char">#10</span> <span class="preprocessor">{$endif}</span>
    <span class="preprocessor">{$ifdef MSWINDOWS}</span> <span class="char">#13</span><span class="char">#10</span> <span class="preprocessor">{$endif}</span> ;

<span class="preprocessor">{$define MY_SYMBOL}</span>

<span class="preprocessor">{$ifdef MY_SYMBOL}</span>
<span class="keyword">procedure</span> Bar;
<span class="preprocessor">{$endif}</span>

<span class="preprocessor">{$define CallingConventionMacro := unknown}</span>
<span class="preprocessor">{$ifdef UNIX}</span>
  <span class="preprocessor">{$define CallingConventionMacro := cdecl}</span>
<span class="preprocessor">{$endif}</span>
<span class="preprocessor">{$ifdef MSWINDOWS}</span>
  <span class="preprocessor">{$define CallingConventionMacro := stdcall}</span>
<span class="preprocessor">{$endif}</span>
<span class="keyword">procedure</span> RealProcedureName; CallingConventionMacro; <span class="directive">external</span> <span class="string"><span class="delimiter">'</span><span class="content">some_external_library</span><span class="delimiter">'</span></span>;

<span class="keyword">implementation</span>

<span class="preprocessor">{$include some_file.inc}</span>
<span class="comment">// $I is just a shortcut for $include</span>
<span class="preprocessor">{$I some_other_file.inc}</span>

<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Include files have commonly the <code>.inc</code> extension, and are used for two purposes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The include file may only contain other compiler directives, that 
"configure" your source code. For example you could create a file <code>myconfig.inc</code> with these contents:</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span>
<span class="preprocessor">{$H+}</span>
<span class="preprocessor">{$J-}</span>
<span class="preprocessor">{$ifndef VER3}</span>
  <span class="preprocessor">{$error This code can only be compiled using FPC version at least 3.x.}</span>
<span class="preprocessor">{$endif}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Now you can include this file using <code>{$I myconfig.inc}</code> in all your sources.</p>
</div>
</li>
<li>
<p>The other common use is to split a large unit into many files, while 
still keeping it a single unit as far as the language rules are 
concerned. Do not overuse this technique — your first instinct should be
 to split a single unit into multiple units, not to split a single unit 
into multiple include files. Never the less, this is a useful technique.</p>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>It allows to avoid "exploding" the number of units, while still 
keeping your source code files short. For example, it may be better to 
have a single unit with <em>"commonly used UI controls"</em> than to create <em>one unit for each UI control class</em>,
 as the latter approach would make the typical "uses" clause long (since
 a typical UI code will depend on a couple of UI classes). But placing 
all these UI classes in a single <code>myunit.pas</code> file would make it a long file, unhandy to navigate, so splitting it into multiple include files may make sense.</p>
</li>
<li>
<p>It allows to have a cross-platform unit interface with platform-dependent implementation easily. Basically you can do</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$ifdef UNIX}</span> <span class="preprocessor">{$I my_unix_implementation.inc}</span> <span class="preprocessor">{$endif}</span>
<span class="preprocessor">{$ifdef MSWINDOWS}</span> <span class="preprocessor">{$I my_windows_implementation.inc}</span> <span class="preprocessor">{$endif}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Sometimes this is better than writing a long code with many <code>{$ifdef UNIX}</code>, <code>{$ifdef MSWINDOWS}</code>
 intermixed with normal code (variable declarations, routine 
implementation). The code is more readable this way. You can even use 
this technique more aggressively, by using the <code>-Fi</code> 
command-line option of FPC to include some subdirectories only for 
specific platforms. Then you can have many version of include file <code>{$I my platform_specific_implementation.inc}</code> and you simply include them, letting the compiler find the correct version.</p>
</div>
</li>
</ol>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_records">7.6. Records</h3>
<div class="paragraph">
<p><em>Record</em> is just a container for other variables. It’s like a much, much simplified <em>class</em>: there is no inheritance or virtual methods. It is like a <em>structure</em> in C-like languages.</p>
</div>
<div class="paragraph">
<p>If you use the <code>{$modeswitch advancedrecords}</code> directive, records <strong>can</strong> have methods and visibility specifiers. In general, language features that are available for classes, and <em>do not break the simple predictable memory layout of a record</em>, are then possible.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="preprocessor">{$modeswitch advancedrecords}</span>
<span class="keyword">type</span>
  TMyRecord = <span class="keyword">record</span>
  <span class="directive">public</span>
    I, Square: Integer;
    <span class="keyword">procedure</span> WritelnDescription;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyRecord.WritelnDescription;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Square of </span><span class="delimiter">'</span></span>, I, <span class="string"><span class="delimiter">'</span><span class="content"> is </span><span class="delimiter">'</span></span>, Square);
<span class="keyword">end</span>;

<span class="keyword">var</span>
  A: <span class="keyword">array</span> [<span class="integer">0</span>..<span class="integer">9</span>] <span class="keyword">of</span> TMyRecord;
  R: TMyRecord;
  I: Integer;
<span class="keyword">begin</span>
  <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> <span class="integer">9</span> <span class="keyword">do</span>
  <span class="keyword">begin</span>
    A[I].I := I;
    A[I].Square := I * I;
  <span class="keyword">end</span>;

  <span class="keyword">for</span> R <span class="keyword">in</span> A <span class="keyword">do</span>
    R.WritelnDescription;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Records are useful when you need speed or a predictable memory layout:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Records do not have any constructor or destructor. You just define a 
variable of a record type. It has undefined contents (memory garbage) at
 the beginning (except auto-managed types, like strings; they are 
guaranteed to be initialized to be empty, and finalized to free the 
reference count).</p>
</li>
<li>
<p>Arrays of records are nicely linear in memory, so they are cache-friendly.</p>
</li>
<li>
<p>The memory layout of records (size, padding between fields) is clearly defined in some situations: when you request the <em>C layout</em>, or when you use <code>packed record</code>.
 This is useful if you need to pass records around to libraries written 
in other programming languages, or when you use records to make dirty 
low-level tricks (like unsafe typecasting one type to another, being 
aware of their memory representation).</p>
</li>
<li>
<p>Records can also have <code>case</code> parts, which work like <em>unions</em>
 in C-like languages. They allows to treat the same memory piece as a 
different type, depending on your needs. As such, this allows for 
greater memory efficiency in some cases. And it allows for more <em>dirty, low-level unsafe tricks</em>:)</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_old_style_objects">7.7. Old-style objects</h3>
<div class="paragraph">
<p>In the old days, Turbo Pascal introduced another syntax for class-like functionality, using the <code>object</code> keyword. It’s discouraged to use it anymore, except when you want to get the <em>record with methods</em> feature. Then the old-style objects are useful.</p>
</div>
<div class="paragraph">
<p>Both <code>record</code> and <code>object</code> do not have to be allocated / freed. A simple <code>record</code> or <code>object</code>
 is not a reference (pointer) to something, it’s simply the data. This 
makes them comfortable for small data, where calling allocation / free 
would be bothersome. It also makes them fast — a list of such structures
 is nicely linear in memory, iterating over it doesn’t involve jumping 
over pointers. Also, their memory layout is defined in <em>some</em> situations (packed records, or records with C layout), which makes them suitable to pass to external APIs, like OpenGL.</p>
</div>
</div>
<div class="sect2">
<h3 id="_pointers">7.8. Pointers</h3>
<div class="paragraph">
<p>You can create a <em>pointer</em> to any other type. The pointer to type <code>TMyRecord</code> is declared as <code>^TMyRecord</code>, and by convention is called <code>PMyRecord</code>. This is a traditional example of a linked list of integers using records:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  PMyRecord = ^TMyRecord;
  TMyRecord = <span class="keyword">record</span>
    Value: Integer;
    Next: PMyRecord;
  <span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that the definition is recursive (type <code>PMyRecord</code> is defined using type <code>TMyRecord</code>, while <code>TMyRecord</code> is defined using <code>PMyRecord</code>). It is allowed to define a pointer type to a <em>not-yet-defined type</em>, as long as it will be resolved within the same <code>type</code> block.</p>
</div>
<div class="paragraph">
<p>You can allocate and free pointers using the <code>New</code> / <code>Dispose</code> methods, or (more low-level, not type-safe) <code>GetMem</code> / <code>FreeMem</code> methods. You dereference the pointer (to access the stuff <em>pointed by</em>) you append the <code>^</code> operator. To make the inverse operation, which is to <em>get a pointer of an existing variable</em>, you prefix it with <code>@</code> operator.</p>
</div>
<div class="paragraph">
<p>There is also an untyped <code>Pointer</code> type, similar to <code>void*</code> in C-like languages. It is completely unsafe, and can be typecasted to any other pointer type.</p>
</div>
<div class="paragraph">
<p>Remember that a <em>class instance</em> is also in fact a pointer, although it doesn’t require any <code>^</code> or <code>@</code> operators to use it.
A linked list using classes is certainly possible, it would simply be this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
    Value: Integer;
    Next: TMyClass;
  <span class="keyword">end</span>;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_operator_overloading">7.9. Operator overloading</h3>
<div class="paragraph">
<p>You can override the meaning of many language operators, for example 
to allow addition and multiplication of your custom types. Like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> StrUtils;

operator* (<span class="keyword">const</span> S: <span class="keyword">string</span>; <span class="keyword">const</span> A: Integer): <span class="keyword">string</span>;
<span class="keyword">begin</span>
  Result := DupeString(S, A);
<span class="keyword">end</span>;

<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">bla</span><span class="delimiter">'</span></span> * <span class="integer">10</span>);
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can override operators on classes too. Since you usually create 
new instances of your classes inside the operator function, the caller 
must remember to free the result.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
    MyInt: Integer;
  <span class="keyword">end</span>;

operator* (<span class="keyword">const</span> C1, C2: TMyClass): TMyClass;
<span class="keyword">begin</span>
  Result := TMyClass.Create;
  Result.MyInt := C1.MyInt * C2.MyInt;
<span class="keyword">end</span>;

<span class="keyword">var</span>
  C1, C2: TMyClass;
<span class="keyword">begin</span>
  C1 := TMyClass.Create;
  <span class="keyword">try</span>
    C1.MyInt := <span class="integer">12</span>;
    C2 := C1 * C1;
    <span class="keyword">try</span>
      Writeln(<span class="string"><span class="delimiter">'</span><span class="content">12 * 12 = </span><span class="delimiter">'</span></span>, C2.MyInt);
    <span class="keyword">finally</span> FreeAndNil(C2) <span class="keyword">end</span>;
  <span class="keyword">finally</span> FreeAndNil(C1) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can override operators on records too. This is usually easier 
than overloading them for classes, as the caller doesn’t have to deal 
then with memory management.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TMyRecord = <span class="keyword">record</span>
    MyInt: Integer;
  <span class="keyword">end</span>;

operator* (<span class="keyword">const</span> C1, C2: TMyRecord): TMyRecord;
<span class="keyword">begin</span>
  Result.MyInt := C1.MyInt * C2.MyInt;
<span class="keyword">end</span>;

<span class="keyword">var</span>
  R1, R2: TMyRecord;
<span class="keyword">begin</span>
  R1.MyInt := <span class="integer">12</span>;
  R2 := R1 * R1;
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">12 * 12 = </span><span class="delimiter">'</span></span>, R2.MyInt);
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="paragraph">
<p>For records, it’s adviced to use <code>{$modeswitch advancedrecords}</code> and override operators as <code>class operator</code> inside the record. This allows to use generic classes that depend on some operator existence (like <code>TFPGList</code>,
 that depends on equality operator being available) with such records. 
Otherwise the "global" definition of an operator (not inside the record)
 would not be found (because it’s not available at the code that 
implements the <code>TFPGList</code>), and you could not specialize a list like <code>specialize TFPGList&lt;TMyRecord&gt;</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="preprocessor">{$modeswitch advancedrecords}</span>
<span class="keyword">uses</span> SysUtils, FGL;

<span class="keyword">type</span>
  TMyRecord = <span class="keyword">record</span>
    MyInt: Integer;
    <span class="keyword">class</span> operator+ (<span class="keyword">const</span> C1, C2: TMyRecord): TMyRecord;
    <span class="keyword">class</span> operator= (<span class="keyword">const</span> C1, C2: TMyRecord): boolean;
  <span class="keyword">end</span>;

<span class="keyword">class</span> operator TMyRecord.+ (<span class="keyword">const</span> C1, C2: TMyRecord): TMyRecord;
<span class="keyword">begin</span>
  Result.MyInt := C1.MyInt + C2.MyInt;
<span class="keyword">end</span>;

<span class="keyword">class</span> operator TMyRecord.= (<span class="keyword">const</span> C1, C2: TMyRecord): boolean;
<span class="keyword">begin</span>
  Result := C1.MyInt = C2.MyInt;
<span class="keyword">end</span>;

<span class="keyword">type</span>
  TMyRecordList = specialize TFPGList&lt;TMyRecord&gt;;

<span class="keyword">var</span>
  R, ListItem: TMyRecord;
  L: TMyRecordList;
<span class="keyword">begin</span>
  L := TMyRecordList.Create;
  <span class="keyword">try</span>
    R.MyInt := <span class="integer">1</span>;   L.Add(R);
    R.MyInt := <span class="integer">10</span>;  L.Add(R);
    R.MyInt := <span class="integer">100</span>; L.Add(R);

    R.MyInt := <span class="integer">0</span>;
    <span class="keyword">for</span> ListItem <span class="keyword">in</span> L <span class="keyword">do</span>
      R := ListItem + R;

    Writeln(<span class="string"><span class="delimiter">'</span><span class="content">1 + 10 + 100 = </span><span class="delimiter">'</span></span>, R.MyInt);
  <span class="keyword">finally</span> FreeAndNil(L) <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_advanced_classes_features">8. Advanced classes features</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_private_and_strict_private">8.1. private and strict private</h3>
<div class="paragraph">
<p>The <code>private</code> visibility specifier means that the field 
(or method) in not accessible outside of this class. But it allows an 
exception: all the code defined <em>in the same unit</em> can break this, and access private fields and methods. A C++ programmer would say that in Pascal <em>all classes within a single unit are friends</em>. This is often useful, and doesn’t break your encapsulation, since it’s limited to a unit.</p>
</div>
<div class="paragraph">
<p>However, if you create larger units, with many classes (that are not tightly integrated with each other), it’s safer to use <code>strict private</code>. As you can guess, it means that the field (or method) in not accessible outside of this class — period. No exceptions.</p>
</div>
<div class="paragraph">
<p>In a similar manner, there’s <code>protected</code> visibility (visible to descendants, or friends in the same unit) and <code>strict protected</code> (visible to descendants, period).</p>
</div>
</div>
<div class="sect2">
<h3 id="_class_methods">8.2. Class methods</h3>
<div class="paragraph">
<p>These are methods you can call having a class reference (<code>TMyClass</code>), not necessarily a class instance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TEnemy = <span class="keyword">class</span>
    <span class="keyword">procedure</span> Kill;
    <span class="keyword">class</span> <span class="keyword">procedure</span> KillAll;
  <span class="keyword">end</span>;

<span class="keyword">var</span>
  E: TEnemy;
<span class="keyword">begin</span>
  E := TEnemy.Create;
  <span class="keyword">try</span>
    E.Kill;
  <span class="keyword">finally</span> FreeAndNil(E) <span class="keyword">end</span>;
  TEnemy.KillAll;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that they can be virtual — it makes sense, and is sometimes very useful, when combined with <a href="#_class_references">Class references</a>.</p>
</div>
<div class="paragraph">
<p>Note that a constructor always acts like a class method when called in a normal fashion (<code>MyInstance := TMyClass.Create(…​);</code>).
 Although it’s possible to also call a constructor from within the class
 itself, like a normal method, and then it acts like a normal method. 
This is a useful feature to "chain" constructors, when one constructor 
(e.g. overloaded to take an integer parameter) does some job, and then 
calls another constructor (e.g. parameter-less).</p>
</div>
</div>
<div class="sect2">
<h3 id="_more_stuff_inside_classes_and_nested_classes">8.3. More stuff inside classes and nested classes</h3>
<div class="paragraph">
<p>You can open a section of constants (<code>const</code>) or types (<code>type</code>)
 within a class. This way, you can even define a class within a class. 
The visibility specifiers work as always, in particular the nested class
 can be private (not visible to the outside world), which is often 
useful.</p>
</div>
<div class="paragraph">
<p>Note that to declare a field after a constant or type you will need to open a <code>var</code> block.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>
  <span class="directive">private</span>
    <span class="keyword">type</span>
      TInternalClass = <span class="keyword">class</span>
        Velocity: Single;
        <span class="keyword">procedure</span> DoSomething;
      <span class="keyword">end</span>;
    <span class="keyword">var</span>
    FInternalClass: TInternalClass;
  <span class="directive">public</span>
    <span class="keyword">const</span>
      DefaultVelocity = <span class="integer">10</span><span class="float">0.0</span>;
    <span class="keyword">constructor</span> Create;
    <span class="keyword">destructor</span> Destroy; <span class="directive">override</span>;
  <span class="keyword">end</span>;

<span class="keyword">constructor</span> TMyClass.Create;
<span class="keyword">begin</span>
  <span class="keyword">inherited</span>;
  FInternalClass := TInternalClass.Create;
  FInternalClass.Velocity := DefaultVelocity;
  FInternalClass.DoSomething;
<span class="keyword">end</span>;

<span class="keyword">destructor</span> TMyClass.Destroy;
<span class="keyword">begin</span>
  FreeAndNil(FInternalClass);
  <span class="keyword">inherited</span>;
<span class="keyword">end</span>;

<span class="comment">{ note that method definition is prefixed with
  "TMyClass.TInternalClass" below. }</span>
<span class="keyword">procedure</span> TMyClass.TInternalClass.DoSomething;
<span class="keyword">begin</span>
<span class="keyword">end</span>;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_class_references">8.4. Class references</h3>
<div class="paragraph">
<p><em>Class reference</em> allows you to choose the class at runtime, 
for example to call a class method or constructor without knowing the 
exact class at compile-time. It is a type declared as <code>class of TMyClass</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>(TComponent)
  <span class="keyword">end</span>;

  TMyClass1 = <span class="keyword">class</span>(TMyClass)
  <span class="keyword">end</span>;

  TMyClass2 = <span class="keyword">class</span>(TMyClass)
  <span class="keyword">end</span>;

  TMyClassRef = <span class="keyword">class</span> <span class="keyword">of</span> TMyClass;

<span class="keyword">var</span>
  C: TMyClass;
  ClassRef: TMyClassRef;
<span class="keyword">begin</span>
  <span class="comment">// Obviously you can do this:</span>

  C := TMyClass.Create(<span class="keyword">nil</span>); FreeAndNil(C);
  C := TMyClass1.Create(<span class="keyword">nil</span>); FreeAndNil(C);
  C := TMyClass2.Create(<span class="keyword">nil</span>); FreeAndNil(C);

  <span class="comment">// In addition, using class references, you can also do this:</span>

  ClassRef := TMyClass;
  C := ClassRef.Create(<span class="keyword">nil</span>); FreeAndNil(C);

  ClassRef := TMyClass1;
  C := ClassRef.Create(<span class="keyword">nil</span>); FreeAndNil(C);

  ClassRef := TMyClass2;
  C := ClassRef.Create(<span class="keyword">nil</span>); FreeAndNil(C);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Class references can be combined with virtual class methods. This 
gives a similar effect as using classes with virtual methods — the 
actual method to be executed is determined at runtime.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>(TComponent)
    <span class="keyword">class</span> <span class="keyword">procedure</span> DoSomething; <span class="directive">virtual</span>; <span class="directive">abstract</span>;
  <span class="keyword">end</span>;

  TMyClass1 = <span class="keyword">class</span>(TMyClass)
    <span class="keyword">class</span> <span class="keyword">procedure</span> DoSomething; <span class="directive">override</span>;
  <span class="keyword">end</span>;

  TMyClass2 = <span class="keyword">class</span>(TMyClass)
    <span class="keyword">class</span> <span class="keyword">procedure</span> DoSomething; <span class="directive">override</span>;
  <span class="keyword">end</span>;

  TMyClassRef = <span class="keyword">class</span> <span class="keyword">of</span> TMyClass;

<span class="keyword">var</span>
  C: TMyClass;
  ClassRef: TMyClassRef;
<span class="keyword">begin</span>
  ClassRef := TMyClass1;
  ClassRef.DoSomething;

  ClassRef := TMyClass2;
  ClassRef.DoSomething;

  <span class="comment">{ And this will cause an exception at runtime,
    since DoSomething is abstract in TMyClass. }</span>
  ClassRef := TMyClass;
  ClassRef.DoSomething;
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you have an instance, and you would like to get a reference to 
it’s class (not the declared class, but the final descendant class used 
at its construction), you can use the <code>ClassType</code> property. The declared type of <code>ClassType</code> is <code>TClass</code>, which stands for <code>class of TObject</code>. Often you can safely typecast it to something more specific, when you know that the instance is something more specific than <code>TObject</code>.</p>
</div>
<div class="paragraph">
<p>In particular, you can use the <code>ClassType</code> reference to call virtual methods, including virtual constructors. This allows you to create a method like <code>Clone</code> that constructs an instance of <em>the exact run-time class of the current object</em>. You can combine it with <a href="#_cloning_tpersistent_assign">Cloning: TPersistent.Assign</a> to have a method that returns a newly-constructed clone of the current instance.</p>
</div>
<div class="paragraph">
<p>Remember that it only works when the constructor of your class is virtual. For example, it can be used with the standard <code>TComponent</code> descendants, since they all must override <code>TComponent.Create(AOwner: TComponent)</code> virtual constructor.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMyClass = <span class="keyword">class</span>(TComponent)
    <span class="keyword">procedure</span> Assign(Source: TPersistent); <span class="directive">override</span>;
    <span class="keyword">function</span> Clone(AOwner: TComponent): TMyClass;
  <span class="keyword">end</span>;

  TMyClassRef = <span class="keyword">class</span> <span class="keyword">of</span> TMyClass;

<span class="keyword">function</span> TMyClass.Clone(AOwner: TComponent): TMyClass;
<span class="keyword">begin</span>
  <span class="comment">// This would always create an instance of exactly TMyClass:</span>
  <span class="comment">//Result := TMyClass.Create(AOwner);</span>
  <span class="comment">// This can potentially create an instance of TMyClass descendant:</span>
  Result := TMyClassRef(ClassType).Create(AOwner);
  Result.Assign(Self);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_class_helpers">8.5. Class helpers</h3>
<div class="paragraph">
<p>The <em>method</em> is just a procedure or function inside a class. From the outside of the class, you call it with a special syntax <code>MyInstance.MyMethod(…​)</code>. After a while you grow accustomed to thinking that <em>if I want to make action Action on instance X, I write `X.Action(…​)`</em>.</p>
</div>
<div class="paragraph">
<p>But sometimes, you need to implement something that conceptually is <em>an action on class TMyClass</em> without modifying the <em>TMyClass</em>
 source code. Sometimes it’s because it’s not your source code, and you 
don’t want to change it. Sometimes it’s because of the 
dependencies — adding a method like <code>Render</code> to a class like <code>TMy3DObject</code> seems like a straightforward idea, but maybe the base implementation of class <code>TMy3DObject</code>
 should be kept independent from the rendering code? It would be better 
to "enhance" an existing class, to add functionality to it without 
changing it’s source code.</p>
</div>
<div class="paragraph">
<p>Simple way to do it is then to create a global procedure that takes an instance of <code>TMy3DObject</code> as it’s 1st parameter.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">procedure</span> Render(<span class="keyword">const</span> O: TMy3DObject; <span class="keyword">const</span> Color: TColor);
<span class="keyword">var</span>
  I: Integer;
<span class="keyword">begin</span>
  <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> O.ShapesCount - <span class="integer">1</span> <span class="keyword">do</span>
    RenderMesh(O.Shape[I].Mesh, Color);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="paragraph">
<p>This works perfectly, but the downside is that calling it looks a little ugly. While usually you call actions like <code>X.Action(…​)</code>, in this case you have to call them like <code>Render(X, …​)</code>. It would be cool to be able to just write <code>X.Render(…​)</code>, even when <code>Render</code> is not implemented in the same unit as <code>TMy3DObject</code>.</p>
</div>
<div class="paragraph">
<p>And this is where you use class helpers. They are just a way to 
implement procedures / functions that operate on given class, and that 
are called like methods, but are not in fact normal methods — they were 
added outside of the <code>TMy3DObject</code> definition.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="keyword">type</span>
  TMy3DObjectHelper = <span class="keyword">class</span> helper <span class="keyword">for</span> TMy3DObject
    <span class="keyword">procedure</span> Render(<span class="keyword">const</span> Color: TColor);
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMy3DObjectHelper.Render(<span class="keyword">const</span> Color: TColor);
<span class="keyword">var</span>
  I: Integer;
<span class="keyword">begin</span>
  <span class="comment">// note that we access ShapesCount, Shape without any qualifiers here</span>
  <span class="keyword">for</span> I := <span class="integer">0</span> <span class="keyword">to</span> ShapesCount - <span class="integer">1</span> <span class="keyword">do</span>
    RenderMesh(Shape[I].Mesh, Color);
<span class="keyword">end</span>;</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The more general concept is <em>"type helper"</em>. Using them you can add methods even to primitive types, like integers or enums. You can also add <em>"record helpers</em>" to (you guessed it…​) records. See <a href="http://lists.freepascal.org/fpc-announce/2013-February/000587.html" class="bare">http://lists.freepascal.org/fpc-announce/2013-February/000587.html</a> .
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_virtual_constructors_destructors">8.6. Virtual constructors, destructors</h3>
<div class="paragraph">
<p>Destructor name is always <code>Destroy</code>, it is virtual (since you can call it without knowing the exact class at compile-time) and parameter-less.</p>
</div>
<div class="paragraph">
<p>Constructor name is by convention <code>Create</code>.</p>
</div>
<div class="paragraph">
<p>You can change this name, although be careful with this — if you define <code>CreateMy</code>, always redefine also the name <code>Create</code>, otherwise the user can still access the constructor <code>Create</code> of the ancestor, bypassing your <code>CreateMy</code> constructor.</p>
</div>
<div class="paragraph">
<p>In the base <code>TObject</code> it is not virtual, and when creating
 descendants you’re free to change the parameters. The new constructor 
will hide the constructor in ancestor (note: don’t put here <code>overload</code>, unless you want to break it).</p>
</div>
<div class="paragraph">
<p>In the <code>TComponent</code> descendants, you should override it’s <code>constructor Create(AOwner: TComponent);</code>.
 For streaming functionality, to create a class without knowing it’s 
type at compile time, having virtual constructors is very useful (see 
"class references" below).</p>
</div>
</div>
<div class="sect2">
<h3 id="_an_exception_in_constructor">8.7. An exception in constructor</h3>
<div class="paragraph">
<p>What happens if an exception happens during a constructor? The line</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">X := TMyClass.Create;</code></pre>
</div>
</div>
<div class="paragraph">
<p>does not execute to the end in this case, <code>X</code> cannot be assigned, so who will cleanup after a partially-constructed class?</p>
</div>
<div class="paragraph">
<p>The solution of Object Pascal is that, in case an exception occurs 
within a constructor, then the destructor is called. This is a reason 
why <em>your destructor must be robust</em>, which means it should work 
in any circumstances, even on half-created class instance. Usually this 
is easy if you release everything safely, like by <code>FreeAndNil</code>.</p>
</div>
<div class="paragraph">
<p>We also have to depend in such cases that <em>the memory of the class is guaranteed to be zeroed right before the constructor code is executed</em>. So we know that at the beginning, all class references are <code>nil</code>, all integers are <code>0</code> and so on.</p>
</div>
<div class="paragraph">
<p>So below works without any memory leaks:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="keyword">uses</span> SysUtils;

<span class="keyword">type</span>
  TGun = <span class="keyword">class</span>
  <span class="keyword">end</span>;

  TPlayer = <span class="keyword">class</span>
    Gun1, Gun2: TGun;
    <span class="keyword">constructor</span> Create;
    <span class="keyword">destructor</span> Destroy; <span class="directive">override</span>;
  <span class="keyword">end</span>;

<span class="keyword">constructor</span> TPlayer.Create;
<span class="keyword">begin</span>
  <span class="keyword">inherited</span>;
  Gun1 := TGun.Create;
  <span class="keyword">raise</span> Exception.Create(<span class="string"><span class="delimiter">'</span><span class="content">Raising an exception from constructor!</span><span class="delimiter">'</span></span>);
  Gun2 := TGun.Create;
<span class="keyword">end</span>;

<span class="keyword">destructor</span> TPlayer.Destroy;
<span class="keyword">begin</span>
  <span class="comment">{ in case since the constructor crashed, we can
    have Gun1 &lt;&gt; nil and Gun2 = nil now. Deal with it.
    ...Actually, in this case, FreeAndNil deals with it without
    any additional effort on our side, because FreeAndNil checks
    whether the instance is nil before calling it's destructor. }</span>
  FreeAndNil(Gun1);
  FreeAndNil(Gun2);
  <span class="keyword">inherited</span>;
<span class="keyword">end</span>;

<span class="keyword">begin</span>
  <span class="keyword">try</span>
    TPlayer.Create;
  <span class="keyword">except</span>
    <span class="directive">on</span> E: Exception <span class="keyword">do</span>
      Writeln(<span class="string"><span class="delimiter">'</span><span class="content">Caught </span><span class="delimiter">'</span></span> + E.ClassName + <span class="string"><span class="delimiter">'</span><span class="content">: </span><span class="delimiter">'</span></span> + E.Message);
  <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_interfaces">9. Interfaces</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_good_corba_interfaces">9.1. Good (CORBA) interfaces</h3>
<div class="paragraph">
<p>We have interfaces, much like in Java. The idea is that <em>an interface</em>
 declares an API, much like a class, but it does not define the 
implementation. A class can implement many interfaces, but it can only 
have 1 ancestor class.</p>
</div>
<div class="paragraph">
<p>You can cast a class to any interface it supports, and then <em>call the methods through that interface</em>.
 This allows to treat in a uniform fashion the classes that don’t 
descend from each other, but still share some common functionality. 
Useful when a simple class inheritance is not enough.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="preprocessor">{$interfaces corba}</span>

<span class="keyword">uses</span> SysUtils, Classes;

<span class="keyword">type</span>
  IMyInterface = <span class="keyword">interface</span>
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

  TMyClass1 = <span class="keyword">class</span>(IMyInterface)
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

  TMyClass2 = <span class="keyword">class</span>(IMyInterface)
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

  TMyClass3 = <span class="keyword">class</span>
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass1.Shoot;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClass1.Shoot</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass2.Shoot;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClass2.Shoot</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass3.Shoot;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClass3.Shoot</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> UseThroughInterface(I: IMyInterface);
<span class="keyword">begin</span>
  <span class="directive">Write</span>(<span class="string"><span class="delimiter">'</span><span class="content">Shooting... </span><span class="delimiter">'</span></span>);
  I.Shoot;
<span class="keyword">end</span>;

<span class="keyword">var</span>
  C1: TMyClass1;
  C2: TMyClass2;
  C3: TMyClass3;
<span class="keyword">begin</span>
  C1 := TMyClass1.Create;
  C2 := TMyClass2.Create;
  C3 := TMyClass3.Create;
  <span class="keyword">try</span>
    <span class="keyword">if</span> C1 <span class="keyword">is</span> IMyInterface <span class="keyword">then</span>
      UseThroughInterface(C1 <span class="keyword">as</span> IMyInterface);
    <span class="keyword">if</span> C2 <span class="keyword">is</span> IMyInterface <span class="keyword">then</span>
      UseThroughInterface(C2 <span class="keyword">as</span> IMyInterface);
    <span class="keyword">if</span> C3 <span class="keyword">is</span> IMyInterface <span class="keyword">then</span>
      UseThroughInterface(C3 <span class="keyword">as</span> IMyInterface);
  <span class="keyword">finally</span>
    FreeAndNil(C1);
    FreeAndNil(C2);
    FreeAndNil(C3);
  <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The default interface style
is <em>COM</em>. But I advice to use <em>CORBA</em> style interfaces, and the <code>{$interfaces corba}</code> directive, in all modern code dealing with interfaces. The <em>COM</em> interfaces are somewhat an <em>embarrassment to the language</em>, to be honest (details in the next section).
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_ugly_com_interfaces">9.2. Ugly (COM) interfaces</h3>
<div class="paragraph">
<p>The <em>COM interfaces</em> bring two additional features:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>integration with COM (a technology from Windows, also available on Unix through <em>XPCOM</em>, used by Mozilla),</p>
</li>
<li>
<p>reference counting (which gives you automatic destruction when all the interface references go out of scope).</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>In my eyes, it is rather ugly to connect <em>COM interfaces</em> with
 such features. It complicates using the interfaces for the simple 
purpose: when multiple classes implement the same API, but cannot 
descend from a common class. Then it’s nice to be able to cast them as 
the same interface, and use their common API through that interface. 
That’s how <em>CORBA interfaces</em> work, and how interfaces work in C# (<a href="https://msdn.microsoft.com/en-us/library/ms173156.aspx" class="bare">https://msdn.microsoft.com/en-us/library/ms173156.aspx</a>) and Java (<a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html" class="bare">https://docs.oracle.com/javase/tutorial/java/concepts/interface.html</a>).</p>
</div>
<div class="paragraph">
<p>When using <em>COM interfaces</em>, you need to be aware of their <em>automatic destruction</em> mechanism and relation to COM technology. In practice, this means that:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You need to declare a GUID at your COM interfaces, to make the <code>Supports(ObjectInstance, IMyInterface)</code> or <code>ObjectInstance is IMyInterface</code> work. Just use <em>Lazarus</em> GUID generator (<code>Ctrl + Shift + G</code> shortcut in the editor).</p>
</li>
<li>
<p>Your class needs to implement a magic <code>_AddRef</code>, <code>_Release</code>, <code>QueryInterface</code> methods. Or descend from something that already implements them, like <code>TComponent</code>. <strong>In the Castle Game Engine</strong> we give you additional useful ancestors <code>TNonRefCountedInterfacedObject</code> and <code>TNonRefCountedInterfacedPersistent</code> for this purpose, see <a href="https://github.com/castle-engine/castle-engine/blob/master/src/base/castleinterfaces.pas" class="bare">https://github.com/castle-engine/castle-engine/blob/master/src/base/castleinterfaces.pas</a> .</p>
</li>
<li>
<p>You can turn off the reference-counting mechanism by simple <code>_AddRef</code>, <code>_Release</code> implementations that always return <code>-1</code>. Actually, the standard implementation of these methods in <code>TComponent</code>, <code>TNonRefCountedInterfacedObject</code> and <code>TNonRefCountedInterfacedPersistent</code> already does this for you.</p>
</li>
<li>
<p>You need to be careful of freeing the class, when it may be 
referenced by some interface variables. Because the interface is 
released using a virtual method (because it <em>may be reference-counted, even though we usually hack it to not be reference-counted…​</em>), you cannot free the underlying object instance as long as some interface variable may point to it. See <em>"7.7 Reference counting"</em> in the FPC manual (<a href="http://freepascal.org/docs-html/ref/refse47.html" class="bare">http://freepascal.org/docs-html/ref/refse47.html</a>).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Here’s a previous example reworked to use COM interfaces:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal"><span class="preprocessor">{$mode objfpc}</span><span class="preprocessor">{$H+}</span><span class="preprocessor">{$J-}</span>
<span class="preprocessor">{$interfaces com}</span>

<span class="keyword">uses</span> SysUtils, Classes;

<span class="keyword">type</span>
  IMyInterface = <span class="keyword">interface</span>
  [<span class="string"><span class="delimiter">'</span><span class="content">{3075FFCD-8EFB-4E98-B157-261448B8D92E}</span><span class="delimiter">'</span></span>]
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

  TMyClass1 = <span class="keyword">class</span>(TComponent, IMyInterface)
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

  TMyClass2 = <span class="keyword">class</span>(TComponent, IMyInterface)
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

  TMyClass3 = <span class="keyword">class</span>(TComponent)
    <span class="keyword">procedure</span> Shoot;
  <span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass1.Shoot;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClass1.Shoot</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass2.Shoot;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClass2.Shoot</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> TMyClass3.Shoot;
<span class="keyword">begin</span>
  Writeln(<span class="string"><span class="delimiter">'</span><span class="content">TMyClass3.Shoot</span><span class="delimiter">'</span></span>);
<span class="keyword">end</span>;

<span class="keyword">procedure</span> UseThroughInterface(I: IMyInterface);
<span class="keyword">begin</span>
  <span class="directive">Write</span>(<span class="string"><span class="delimiter">'</span><span class="content">Shooting... </span><span class="delimiter">'</span></span>);
  I.Shoot;
<span class="keyword">end</span>;

<span class="keyword">var</span>
  C1: TMyClass1;
  C2: TMyClass2;
  C3: TMyClass3;
<span class="keyword">begin</span>
  C1 := TMyClass1.Create(<span class="keyword">nil</span>);
  C2 := TMyClass2.Create(<span class="keyword">nil</span>);
  C3 := TMyClass3.Create(<span class="keyword">nil</span>);
  <span class="keyword">try</span>
    <span class="keyword">if</span> C1 <span class="keyword">is</span> IMyInterface <span class="keyword">then</span>
    <span class="comment">//if Supports(C1, IMyInterface) then // equivalent to "is" check above</span>
      UseThroughInterface(C1 <span class="keyword">as</span> IMyInterface);
    <span class="keyword">if</span> C2 <span class="keyword">is</span> IMyInterface <span class="keyword">then</span>
      UseThroughInterface(C2 <span class="keyword">as</span> IMyInterface);
    <span class="keyword">if</span> C3 <span class="keyword">is</span> IMyInterface <span class="keyword">then</span>
      UseThroughInterface(C3 <span class="keyword">as</span> IMyInterface);
  <span class="keyword">finally</span>
    FreeAndNil(C1);
    FreeAndNil(C2);
    FreeAndNil(C3);
  <span class="keyword">end</span>;
<span class="keyword">end</span>.</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_typecasting_interfaces_without_as_operator">9.3. Typecasting interfaces without "as" operator</h3>
<div class="paragraph">
<p>This section applies to both <em>CORBA</em> and <em>COM</em> interfaces.</p>
</div>
<div class="paragraph">
<p>Casting to an interface type using the <code>as</code> operator makes a check at run-time. Consider this code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">UseThroughInterface(Cx <span class="keyword">as</span> IMyInterface);</code></pre>
</div>
</div>
<div class="paragraph">
<p>It works for all <code>C1</code>, <code>C2</code>, <code>C3</code> instances in the examples in previous sections. If executed, it would make a run-time error in case of <code>C3</code>, that does not implement <code>IMyInterface</code> (but we avoid the error by checking <code>Cx is IMyInterface</code> before doing the cast).</p>
</div>
<div class="paragraph">
<p>You can instead cast the instance as an interface implicitly:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">UseThroughInterface(Cx);</code></pre>
</div>
</div>
<div class="paragraph">
<p>In this case, the typecast must be valid at compile-time. So this will compile for <code>C1</code> and <code>C2</code> (that are declared as classes that implement <code>IMyInterface</code>). But it will not compile for <code>C3</code>.</p>
</div>
<div class="paragraph">
<p>In essence, this typecast looks and works just like for regular classes. Wherever an instance of a class <code>TMyClass</code> is required, you can always use there a variable that is declared with a class of <code>TMyClass</code>, <strong>or <code>TMyClass</code> descendant</strong>. The same rule applies to interfaces. No need for any explicit typecast in such situations.</p>
</div>
<div class="paragraph">
<p>An equivalent is also</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="pascal">UseThroughInterface(IMyInterface(Cx));</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is also a typecast that must be valid at compile-time. Note that
 this syntax is inconsistent with classes typecasts. In case of classes,
 writing <code>TMyClass(C)</code> is an <em>unsafe, unchecked</em> typecast. In case of interfaces, writing <code>IMyInterface(C)</code> is a safe, fast (checked at compile-time) typecast.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_about_this_document">10. About this document</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Copyright Michalis Kamburelis.</p>
</div>
<div class="paragraph">
<p>The source code of this document is in AsciiDoc on <a href="https://github.com/michaliskambi/modern-pascal-introduction" class="bare">https://github.com/michaliskambi/modern-pascal-introduction</a>
 . Suggestions for corrections and additions, and patches and pull 
requests, are always very welcome:) You can reach me through GitHub or 
email <a href="mailto:michalis.kambi@gmail.com">michalis.kambi@gmail.com</a> . My homepage is <a href="https://michalis.ii.uni.wroc.pl/%7Emichalis/" class="bare">https://michalis.ii.uni.wroc.pl/~michalis/</a> .</p>
</div>
<div class="paragraph">
<p>You can redistribute and even modify this document freely, under the same licenses as Wikipedia <a href="https://en.wikipedia.org/wiki/Wikipedia:Copyrights" class="bare">https://en.wikipedia.org/wiki/Wikipedia:Copyrights</a> :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>Creative Commons Attribution-ShareAlike 3.0 Unported License (CC BY-SA)</em></p>
</li>
<li>
<p>or the <em>GNU Free Documentation License (GFDL) (unversioned, with no invariant sections, front-cover texts, or back-cover texts)</em> .</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Thank you for reading!</p>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2016-06-27 11:09:45 CEST
</div>
</div>
<!-- Google analytics -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="Quick%20Modern%20Object%20Pascal%20for%20Programmers_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-6792759-1");
pageTracker._trackPageview();
} catch(err) {}</script>

<!-- Piwik -->
<a href="http://piwik.org/" title="Web analytics" onclick="window.open(this.href);return(false);">
<script type="text/javascript">
var pkBaseURL = (("https:" == document.location.protocol) ? "https://michalis.ii.uni.wroc.pl/piwik/" : "http://michalis.ii.uni.wroc.pl/piwik/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="Quick%20Modern%20Object%20Pascal%20for%20Programmers_files/piwik.js" type="text/javascript"></script><script type="text/javascript">
piwik_action_name = '';
piwik_idsite = 1;
piwik_url = pkBaseURL + "piwik.php";
piwik_log(piwik_action_name, piwik_idsite, piwik_url);
</script>
<object><noscript><p>Web analytics <img src="http://michalis.ii.uni.wroc.pl/piwik/piwik.php?idsite=1" style="border:0" alt=""/></p></noscript></object></a>
<!-- End Piwik Tag -->

</body></html>